<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>comment</key>
	<string>JavaScript Syntax: version 0.1</string>
	<key>fileTypes</key>
	<array>
		<string>js</string>
		<string>htc</string>
		<string>jsx</string>
	</array>
	<key>firstLineMatch</key>
	<string>^#!/usr/bin/env node</string>
	<key>foldingStartMarker</key>
	<string>^.*\bfunction\s*(\w+\s*)?\([^\)]*\)(\s*\{[^\}]*)?\s*$</string>
	<key>foldingStopMarker</key>
	<string>^\s*\}</string>
	<key>keyEquivalent</key>
	<string>^~J</string>
	<key>name</key>
	<string>JavaScript1</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#statements</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>arguments-parentheses</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;=[\w$\)\]\}])((?&lt;!return|void|typeof|yield|default|export)|(?&lt;=[\w$]return|[\w$]void|[\w$]typeof|[\w$]yield|[\w$]default|[\w$]export))\s*\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.parameters.begin.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.parameters.end.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.arguments.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\,</string>
					<key>name</key>
					<string>meta.delimiter.parameter.comma.js</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expressions</string>
				</dict>
			</array>
		</dict>
		<key>array-initializer</key>
		<dict>
			<key>begin</key>
			<string>\[</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.array.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\]</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.array.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.declaration.array.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\,</string>
					<key>name</key>
					<string>meta.delimiter.object.comma.js</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expressions</string>
				</dict>
			</array>
		</dict>
		<key>arrow-function</key>
		<dict>
			<key>begin</key>
			<string>(?x)
(?&lt;![\w$])
(?=
  (?&gt;
    [a-zA-Z_$][\w$]*|
    \([\w$\s,={}\[\]\.:]*\)
  )
  (?&gt;\s*)=&gt;
)
</string>
			<key>end</key>
			<string>(?&lt;=})|(?=[\)\]},;]|$)</string>
			<key>name</key>
			<string>meta.function.arrow.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#arrow-parameter-declaration</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)
(?=
  (?&gt;[a-zA-Z_$][\w$]*)
  (?&gt;\s*)=&gt;
)
</string>
					<key>end</key>
					<string>(?&gt;\s*)(=&gt;)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.function.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.parameter.function.arrow.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#reserved-word</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>variable.parameter.function.arrow.js</string>
								</dict>
							</dict>
							<key>match</key>
							<string>(?&gt;[a-zA-Z_$][\w$]*)</string>
							<key>name</key>
							<string>meta.parameter.function.arrow.normal.js</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#statement-group</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expressions</string>
				</dict>
			</array>
		</dict>
		<key>arrow-parameter-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?x)
(?&lt;![\w$])
(?=\(.*\)\s*=&gt;)
</string>
			<key>end</key>
			<string>(?&lt;=\))(?&gt;\s*(=&gt;))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.function.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.parameter.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#parameter-declaration</string>
				</dict>
			</array>
		</dict>
		<key>block-comment</key>
		<dict>
			<key>begin</key>
			<string>/\*</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\*/</string>
			<key>name</key>
			<string>comment.block.js</string>
		</dict>
		<key>class-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?x)
\b(class)\b\s*
([a-zA-Z_$][\w$]*)?\s*
(?=
(?:(e(?&gt;x(?&gt;t(?&gt;e(?&gt;n(?&gt;ds?)?)?)?)?)?)(?![\w$])\s*([a-zA-Z_$][\w$\.]*)?\s*)?
(?={)
)
</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.class.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.class.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;=})</string>
			<key>name</key>
			<string>meta.class.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;![\w$])(extends)\s+(?=[a-zA-Z_$])</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?={)</string>
					<key>name</key>
					<string>meta.extends.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\.(?!\d)</string>
							<key>name</key>
							<string>meta.delimiter.method.period.js</string>
						</dict>
						<dict>
							<key>match</key>
							<string>(?&lt;![\w$])[a-zA-Z_$][\w$]*</string>
							<key>name</key>
							<string>entity.other.inherited-class.js</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;![\w$])extends(?![\w$])</string>
					<key>name</key>
					<string>storage.modifier.js</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>{</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.class.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.class.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.class.block.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#property-function</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#shorthand-generator-function</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#shorthand-function</string>
						</dict>
						<dict>
							<key>match</key>
							<string>(?&lt;![\w$])(?&gt;get|set)(?![\w$])</string>
							<key>name</key>
							<string>storage.type.js</string>
						</dict>
						<dict>
							<key>match</key>
							<string>(?&lt;![\w$])(?&gt;static)(?![\w$])</string>
							<key>name</key>
							<string>storage.modifier.js</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>node.js shebang</string>
					<key>match</key>
					<string>^#!/usr/bin/env node</string>
					<key>name</key>
					<string>comment.line.nodejs.js</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>/\*\*(?!/)</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block.documentation.js</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#block-comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#line-comment</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^(#!\/).*$\n?</string>
					<key>name</key>
					<string>comment.line.double-slash.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.html.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.html.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(&lt;!--|--&gt;)</string>
					<key>name</key>
					<string>comment.block.html.js</string>
				</dict>
			</array>
		</dict>
		<key>destructuring-assignment</key>
		<dict>
			<key>begin</key>
			<string>(?x)
(?=(?:\[[\s\w$,:\.\[\]\{\}]*\]|{[\s\w$,:\.\[\]\{\}]*})\s*=)
</string>
			<key>end</key>
			<string>(?==)</string>
			<key>name</key>
			<string>meta.destructuring.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#destructuring-pattern</string>
				</dict>
			</array>
		</dict>
		<key>destructuring-default</key>
		<dict>
			<key>begin</key>
			<string>(=)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.declaration.default-parameters.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=[,}\]])</string>
			<key>name</key>
			<string>meta.normal.default-parameters.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expressions</string>
				</dict>
			</array>
		</dict>
		<key>destructuring-pattern</key>
		<dict>
			<key>name</key>
			<string>meta.destructuring.pattern.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\{</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.destructuring.begin.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.destructuring.end.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.destructuring.pattern.object.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#destructuring-default</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\s+</string>
							<key>name</key>
							<string>meta.normal.js</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\,</string>
							<key>name</key>
							<string>meta.delimiter.parameter.comma.js</string>
						</dict>
						<dict>
							<key>match</key>
							<string>[a-zA-Z_$][\w$]*\s*(?=:)</string>
							<key>name</key>
							<string>entity.name.property.destructuring.js</string>
						</dict>
						<dict>
							<key>match</key>
							<string>:</string>
							<key>name</key>
							<string>punctuation.definition.property.js</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\.{3}</string>
							<key>name</key>
							<string>punctuation.rest-parameter.js</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#destructuring-pattern</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\[</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.destructuring.begin.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\]</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.destructuring.end.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.destructuring.pattern.array.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#destructuring-default</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\s+</string>
							<key>name</key>
							<string>meta.normal.js</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\,</string>
							<key>name</key>
							<string>meta.delimiter.parameter.comma.js</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\.{3}</string>
							<key>name</key>
							<string>punctuation.rest-parameter.js</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#destructuring-pattern</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>expression-group</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;![\}\]\)]|["'])\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.parentheses.begin.js</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Primary Expressions of Expressions</string>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.parentheses.end.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.brace.round.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expressions</string>
				</dict>
			</array>
		</dict>
		<key>expression-parentheses</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.parentheses.begin.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.parentheses.end.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.parentheses.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expressions</string>
				</dict>
			</array>
		</dict>
		<key>expressions</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\,</string>
					<key>name</key>
					<string>keyword.operator.comma.js</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#property-accessor</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#destructuring-assignment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#primary-expressions</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#keywords</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#new-expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#identifier-expressions</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#arguments-parentheses</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression-group</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\.(?!\d)</string>
					<key>name</key>
					<string>meta.delimiter.method.period.js</string>
				</dict>
			</array>
		</dict>
		<key>for-statement</key>
		<dict>
			<key>begin</key>
			<string>(?x)
\b(for)\b\s*
(?=\(.*?\)\s*\{?)
</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.for.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;=})|(?&lt;=\))(?!\s*\{)</string>
			<key>name</key>
			<string>meta.statement.for.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\(</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.parentheses.begin.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.parentheses.end.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.parentheses.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#var-in-statement</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#expressions</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\;</string>
							<key>name</key>
							<string>punctuation.terminator.statement.js</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#statements</string>
				</dict>
			</array>
		</dict>
		<key>function-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?x)
\b(function((\s*\*)|\s+|(?=[(/])))
</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;=}|;)</string>
			<key>name</key>
			<string>meta.function.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=[\w$])\s+[\w$]+</string>
					<key>name</key>
					<string>invalid.illegal.js</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=[\w$]+)</string>
					<key>end</key>
					<string></string>
					<key>name</key>
					<string>meta.name.function.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#reserved-word</string>
						</dict>
						<dict>
							<key>match</key>
							<string>[\w$]+</string>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#parameter-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#statement-group</string>
				</dict>
			</array>
		</dict>
		<key>identifier-expressions</key>
		<dict>
			<key>begin</key>
			<string>(?=(\.)?(?&lt;![\w$])[a-zA-Z_$][\w$]*)</string>
			<key>end</key>
			<string>(?!(\s*\.\s*)?[a-zA-Z_$])(?&lt;=[\w$])(?![\w$])</string>
			<key>name</key>
			<string>meta.expression.identifier.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\.(?!\d)</string>
					<key>name</key>
					<string>meta.delimiter.method.period.js</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#support-functions</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;![\w$])[a-zA-Z_$][\w$]*(?=\s*\()</string>
					<key>name</key>
					<string>support.function.any-method.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;![\w$])[a-zA-Z_$][\w$]*(?=\s*\()</string>
					<key>name</key>
					<string>meta.invocation.function.js</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#special-assignment</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
(?&lt;=\.)\s*(?&gt;
  E(?&gt;PSILON)?|
  M(?&gt;IN_VALUE|AX_VALUE)|
  SQRT(?&gt;1_2|2)|
  NEGATIVE_INFINITY|
  URLUnencoded|
  P(?&gt;I|OSITIVE_INFINITY)|
  L(?&gt;N(?&gt;10|2)|OG(?&gt;10E|2E))
)(?![\w$])
</string>
					<key>name</key>
					<string>support.constant.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
(?&lt;![\w$])(?&gt;
  Math|Number|Object|Array|Map|Set|WeakMap|WeakSet
)(?![\w$])
</string>
					<key>name</key>
					<string>support.class.language.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=\.)\s*[a-zA-Z_$][\w$]*</string>
					<key>name</key>
					<string>meta.other.property-name.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?&gt;console|document|window|self|undefined|NaN|that)\b</string>
					<key>name</key>
					<string>support.variable.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;![\w$])[a-zA-Z_$][\w$]*(?=\s*\.)</string>
					<key>name</key>
					<string>variable.other.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;![\w$])[a-zA-Z_$][\w$]*</string>
					<key>name</key>
					<string>variable.other.js</string>
				</dict>
			</array>
		</dict>
		<key>import-statement</key>
		<dict>
			<key>begin</key>
			<string>\b(import)\b</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.import.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=;|$)</string>
			<key>name</key>
			<string>meta.statement.import.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x)
(?=(?:\[|{))
</string>
					<key>end</key>
					<string>(?=)</string>
					<key>name</key>
					<string>variable.declaration.destructuring.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#destructuring-pattern</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(as)\b</string>
					<key>name</key>
					<string>keyword.import.as.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(from)\b</string>
					<key>name</key>
					<string>keyword.import.from.js</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=[a-zA-Z_$][\w$]*\.)</string>
					<key>end</key>
					<string>(?=,|)(?!\.)</string>
					<key>name</key>
					<string>meta.namespace.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\.</string>
							<key>name</key>
							<string>meta.delimiter.method.period.js</string>
						</dict>
						<dict>
							<key>match</key>
							<string>([a-zA-Z_$][\w$]*)</string>
							<key>name</key>
							<string>meta.namespace.js</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=[a-zA-Z_$][\w$]*\s+as)</string>
					<key>end</key>
					<string>(?=,|)</string>
					<key>name</key>
					<string>meta.nonvar.unused-identifier.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#reserved-word</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#special-assignment</string>
						</dict>
						<dict>
							<key>match</key>
							<string>([a-zA-Z_$][\w$]*)</string>
							<key>name</key>
							<string>meta.unused-declaration.js</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=[a-zA-Z_$][\w$]*)</string>
					<key>end</key>
					<string>(?=,|)</string>
					<key>name</key>
					<string>meta.var.identifier.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#reserved-word</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#special-assignment</string>
						</dict>
						<dict>
							<key>match</key>
							<string>([a-zA-Z_$][\w$]*)</string>
							<key>name</key>
							<string>variable.declaration.js</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-expressions</string>
				</dict>
			</array>
		</dict>
		<key>keywords</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#operators</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?&gt;class|var|let|const)(?![\w$])</string>
					<key>name</key>
					<string>storage.type.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?&gt;export|extends)(?![\w$])</string>
					<key>name</key>
					<string>storage.modifier.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?&gt;break|case|catch|continue|default|do|else|finally|for|goto|if|import|package|return|switch|throw|try|while|yield(?&gt;\*)?)(?![\w$])</string>
					<key>name</key>
					<string>keyword.control.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?&gt;super|this|arguments)(?![\w$])</string>
					<key>name</key>
					<string>variable.language.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\btrue(?![\w$])</string>
					<key>name</key>
					<string>constant.language.boolean.true.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\bfalse(?![\w$])</string>
					<key>name</key>
					<string>constant.language.boolean.false.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\bnull(?![\w$])</string>
					<key>name</key>
					<string>constant.language.null.js</string>
				</dict>
			</array>
		</dict>
		<key>labeled-statement-group</key>
		<dict>
			<key>begin</key>
			<string>([a-zA-Z_$][\w$]*)\s*(\:)\s*(\{)</string>
			<key>beginCaptures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.statementgroup.begin.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.statementgroup.end.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.labeled-statement-group.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#statements</string>
				</dict>
			</array>
		</dict>
		<key>line-comment</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.js</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(//).*$\n?</string>
			<key>name</key>
			<string>comment.line.double-slash.js</string>
		</dict>
		<key>line-comment-without-line-end</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.js</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(//).*$</string>
			<key>name</key>
			<string>comment.line.double-slash.js</string>
		</dict>
		<key>new-expression</key>
		<dict>
			<key>begin</key>
			<string>(?x)
(?&lt;=new)(?&lt;![\w$]new)
(?=\s+(?!
  (?&gt;await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|false|finally|for|function|let|if|implements|import|in(?&gt;stanceof|terface)?|new|null|private|protected|package|public|static|return|super|switch|this|throw(?&gt;s)?|true|try|typeof|var|void|while|with|yield)
  (?![\w$])
)[a-zA-Z_$][\w$]*)
</string>
			<key>end</key>
			<string>(?!(\s*\.\s*)?[a-zA-Z_$])(?&lt;=[\w$])(?![\w$])</string>
			<key>name</key>
			<string>meta.expression.new.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\.(?!\d)</string>
					<key>name</key>
					<string>meta.delimiter.method.period.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;![\w$])[a-zA-Z_$][\w$]*</string>
					<key>name</key>
					<string>storage.other.js</string>
				</dict>
			</array>
		</dict>
		<key>numeric</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;![\w$])\.\d+\b</string>
					<key>name</key>
					<string>constant.numeric.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\b(?&lt;!\.)(?&gt;0(?&gt;o|O|(?![bBxX]))[0-7]+(?!\d+))((?:\.\d)|[a-zA-Z8-9_$][\w$]*)?</string>
					<key>name</key>
					<string>constant.numeric.octal.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\b(?&lt;!\.)(?&gt;0(?&gt;b|B)[0-1]+)([a-zA-Z2-9_$][\w$]*)?</string>
					<key>name</key>
					<string>constant.numeric.binary.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\b(?&lt;!\.)\d+\.(?:\d*([a-zA-Z_$][\w$]*)?)</string>
					<key>name</key>
					<string>constant.numeric.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\b(?&lt;!\.)(?&gt;(?&gt;0(?&gt;x|X)[\da-fA-F]+)|(?&gt;\d+))([a-zA-Z_$][\w$]*)?</string>
					<key>name</key>
					<string>constant.numeric.js</string>
				</dict>
			</array>
		</dict>
		<key>object-initializer</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.object.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.object.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.declaration.object.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\[)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.calculated-property.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\])\s*(?=:)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.calculated-property.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.object.calculated-property.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expressions</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(:)\s*</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.property.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(,)\s*|(?=})</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.delimiter.object.comma.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.object.value.calculated-property.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expressions</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)
(?:
  (\d+)|
  (?:([a-zA-Z_?$][\w?.$]*)|(("|')((?:(?!\4).|(\\\4))*)(\4)))(?=\s*:\s*function(?![\w$]))|
  (?:([a-zA-Z_?$][\w?.$]*)|(("|')(?:(?!\10).|(\\\10))*(\10)))
)\s*(:)
</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.js</string>
						</dict>
						<key>10</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
						<key>11</key>
						<dict>
							<key>name</key>
							<string>constant.character.escape.js</string>
						</dict>
						<key>12</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
						<key>13</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.property.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>string.quoted.single.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>constant.character.escape.js</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
						<key>8</key>
						<dict>
							<key>name</key>
							<string>entity.name.property.js</string>
						</dict>
						<key>9</key>
						<dict>
							<key>name</key>
							<string>string.quoted.single.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(,)\s*|(?=})</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.delimiter.object.comma.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.object.property.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expressions</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>\,</string>
					<key>name</key>
					<string>meta.delimiter.object.comma.js</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#property-function</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#shorthand-generator-function</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#shorthand-function</string>
				</dict>
			</array>
		</dict>
		<key>operators</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(?&gt;delete|new|typeof|void|with)(?![\w$])</string>
					<key>name</key>
					<string>keyword.operator.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>!|%|&amp;|\*|\/|\-\-|\-|\+\+|\+|~|===|==|=|!=|!==|&lt;=|&gt;=|&lt;&lt;=|&gt;&gt;=|&gt;&gt;&gt;=|&lt;&gt;|&lt;|&gt;|!|&amp;&amp;|\|\||\?|\:|\*=|(?&lt;!\()/=|%=|\+=|\-=|&amp;=|\^=|\b(?&gt;in(?&gt;stanceof)?|of)(?![\w$])</string>
					<key>name</key>
					<string>keyword.operator.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\.{3}</string>
					<key>name</key>
					<string>keyword.operator.spread.js</string>
				</dict>
			</array>
		</dict>
		<key>parameter-declaration</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.begin.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.end.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.parameter.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\.{3}</string>
					<key>name</key>
					<string>punctuation.rest-parameter.js</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#reserved-word</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;![\w$])[a-zA-Z_$][\w$]*</string>
					<key>name</key>
					<string>variable.parameter.function.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\,[ |\t]*</string>
					<key>name</key>
					<string>meta.delimiter.parameter.comma.js</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)
(?=(?:\[|{))
</string>
					<key>end</key>
					<string>(?==|,|\))</string>
					<key>name</key>
					<string>variable.parameter.destructuring.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#destructuring-pattern</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(=)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.declaration.default-parameters.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=[,;\}\]\)])|(?&lt;!,|^|\s|[&amp;|&lt;&gt;\+\-\*\/=\.])(?=\s*\n)</string>
					<key>name</key>
					<string>meta.default-parameters.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expressions</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>parentheses-statement</key>
		<dict>
			<key>begin</key>
			<string>(?x)
\b(if|while|switch)\b\s*
(?=\(.*?\)\s*\{?)
</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.for.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;=})|(?&lt;=\))(?!\s*\{)</string>
			<key>name</key>
			<string>meta.statement.parentheses.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression-parentheses</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#statements</string>
				</dict>
			</array>
		</dict>
		<key>primary-expressions</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#numeric</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-expressions</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#regular-expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#arrow-function</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#object-initializer</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#array-initializer</string>
				</dict>
			</array>
		</dict>
		<key>property-accessor</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;=[\w$\)\]\}])((?&lt;!return|void|typeof|yield|default|export)|(?&lt;=[\w$]return|[\w$]void|[\w$]typeof|[\w$]yield|[\w$]default|[\w$]export))\s*\[</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.accessor.begin.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\]</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.accessor.end.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.accessor.property.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expressions</string>
				</dict>
			</array>
		</dict>
		<key>property-function</key>
		<dict>
			<key>begin</key>
			<string>(?x)
(?&lt;![\w$])(get|set)\s+
(?&lt;![\w$])(?&gt;([a-zA-Z_$][\w$]*))\s*
(?=\([^\)]*\)\s*{)
</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.property.function.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;=})</string>
			<key>name</key>
			<string>meta.methods.property.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#parameter-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#statement-group</string>
				</dict>
			</array>
		</dict>
		<key>raw-statement-group</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.statementgroup.begin.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.statementgroup.end.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.statement-group.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#statements</string>
				</dict>
			</array>
		</dict>
		<key>regexp</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\[bBAZzG]|[$^]</string>
					<key>name</key>
					<string>keyword.other.control.anchors.regexp.js</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\[(\^?\])?</string>
					<key>end</key>
					<string>\]</string>
					<key>name</key>
					<string>string.regexp.set.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\[:\^?(?&gt;alnum|alpha|ascii|blank|cntrl|digit|graph|lower|print|punct|space|upper|xdigit|word):\]</string>
							<key>name</key>
							<string>constant.other.posix-bracket.regexp.js</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#set</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#character_class</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#character_property</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#special_escapes</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_char</string>
						</dict>
						<dict>
							<key>match</key>
							<string>.-[^\]]</string>
							<key>name</key>
							<string>constant.other.range.regexp.js</string>
						</dict>
						<dict>
							<key>match</key>
							<string>(?&lt;!\[)&amp;&amp;(?!\])</string>
							<key>name</key>
							<string>keyword.operator.intersection.regexp.js</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x) ((?#1)\()
((?#2)\?
  (?:
   &lt;[=!]
  |[&gt;=:!]
  |[imx]{,3}(?:-[imx]{1,3})?(?::(?!\))|(?=\)))
  |[&lt;']((?#3)\w+)[&gt;']
  )
)?
</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.regexp.group.begin</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>string.regexp constant.other.assertion.regexp</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.other.regexp</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>storage.type.regexp.group.end</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.regexp.group.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#regexp</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.regexp</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.other.backref.regexp</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.other.regexp</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
 (\\\d+)
|(\\k[&lt;'](-?\d+|\w+([-+]\d+)?)[&gt;'])
</string>
					<key>name</key>
					<string>keyword.other.backref.regexp.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>((?&lt;!\()[?*+][?+]?)|\{\d*(,\d*)?\}</string>
					<key>name</key>
					<string>support.operator.quantifier.regexp.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\[wWsSdDhH]|\.</string>
					<key>name</key>
					<string>keyword.control.character-class.regexp.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)\\
([tvnrbfae]   (?# general chars)
|[0-8]{3}     (?# octal)
|x\h\h        (?# hexadecimal)
|x\{7\h{7}\}  (?# wide hexadecimal)
|c\d+         (?# control char)
|M-(\\C-)?\d+ (?# meta control char)
|C-\d+        (?# control char 2)
)
</string>
					<key>name</key>
					<string>constant.character.escape.special.regexp.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>constant.character.escape.general.regexp.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>.</string>
					<key>name</key>
					<string>meta.regexp.other.js</string>
				</dict>
			</array>
		</dict>
		<key>regular-expression</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\+\+|\-\-)(?&lt;=[=(:\[,+\-*\/!?&lt;&gt;]|return|yield|void|typeof|&amp;&amp;|\|\||^)\s*(/)(?![/*+{}?])</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(/)[igm]*</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.regexp.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#regexp</string>
				</dict>
			</array>
		</dict>
		<key>reserved-word</key>
		<dict>
			<key>match</key>
			<string>(?x)
\b(?&gt;
  await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|false|finally|for|function|let|if|implements|import|in(?&gt;stanceof|terface)?|new|null|private|protected|package|public|static|
  return|super|switch|this|throw(?&gt;s)?|true|try|typeof|var|void|while|with|yield(?&gt;\*)?
)(?![\w$]) # abstract|boolean|byte|char|double|final|float|goto|int|long|native|short|synchronized|transient|volatile|
</string>
			<key>name</key>
			<string>meta.invalid.js</string>
		</dict>
		<key>shorthand-function</key>
		<dict>
			<key>begin</key>
			<string>(?x)
(?&lt;![\w$])(?:(constructor)|([a-zA-Z_$][\w$]*)|("|')((?:(?!\3).|(?:\\\3))*)(\3))\s*
(?=\()
</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.constructor.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.js</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.js</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.js</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;=})</string>
			<key>name</key>
			<string>meta.class.methods.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#parameter-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#statement-group</string>
				</dict>
			</array>
		</dict>
		<key>shorthand-generator-function</key>
		<dict>
			<key>begin</key>
			<string>(?x)
(\*)\s*
((?&lt;![\w$])[a-zA-Z_$][\w$]*\s*)?
(?=\([^\)]*\)\s*{)
</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;=})</string>
			<key>name</key>
			<string>meta.function.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#parameter-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#statement-group</string>
				</dict>
			</array>
		</dict>
		<key>special-assignment</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;![\w$])[a-zA-Z_$][\w$]*(?=\s*\=\s*class(?!\$)\b)</string>
					<key>name</key>
					<string>entity.name.class.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;![\w$])[A-Z][\w$]*(?=\s*\=\s*function(?!\$)\b)</string>
					<key>name</key>
					<string>entity.name.class.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;![\w$])[a-zA-Z_$][\w$]*(?=\s*\=\s*function(?!\$)\b)</string>
					<key>name</key>
					<string>entity.name.function.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
\s*(?&lt;![\w$])
[a-zA-Z_$][\w$]*
(?=
  (?&gt;\s*)\=(?&gt;\s*)
  (?&gt;
    [a-zA-Z_$][\w$]*|
    \([\w$\s,={}\[\]\.:]*\)
  )
  (?&gt;\s*)=&gt;
)
</string>
					<key>name</key>
					<string>entity.name.function.arrow.js</string>
				</dict>
			</array>
		</dict>
		<key>statement-group</key>
		<dict>
			<key>begin</key>
			<string>(?&gt;(?&lt;![=(:\[,+\-*\/!?&lt;&gt;]|return|void|typeof|yield|default|export|&amp;&amp;|\|\||\s)|(?&lt;==&gt;|\*/))\s*\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.statementgroup.begin.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.statementgroup.end.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.statement-group.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#statements</string>
				</dict>
			</array>
		</dict>
		<key>statements</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#class-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#import-statement</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#for-statement</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#var-statement</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#parentheses-statement</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#statement-group</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#labeled-statement-group</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expressions</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\;</string>
					<key>name</key>
					<string>punctuation.terminator.statement.js</string>
				</dict>
			</array>
		</dict>
		<key>string-expressions</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>'</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>'</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)</string>
							<key>name</key>
							<string>constant.character.escape.js</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>"</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)</string>
							<key>name</key>
							<string>constant.character.escape.js</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>support-functions</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?x)
(?&lt;=\.)\s*(?&gt;
  __define(?&gt;Getter|Setter)__|__lookup(?&gt;Getter|Setter)__|hasOwnProperty|isPrototypeOf|propertyIsEnumerable|to(?&gt;LocaleString|Source|String)|unwatch|valueOf|watch
)(?=\s*\()
</string>
					<key>name</key>
					<string>support.function.prototype.object.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
(?&lt;=\.)\s*(?&gt;
  to(?&gt;Exponential|Fixed|Precision)
)(?=\s*\()
</string>
					<key>name</key>
					<string>support.function.prototype.number.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
(?&lt;=\.)\s*(?&gt;
  anchor|big|blink|bold|char(?&gt;At|CodeAt)|codePointAt|concat|endsWith|fixed|font(?&gt;color|size)|includes|indexOf|italics|lastIndexOf|link|localeCompare|match|normalize|quote|repeat|replace|search|slice|small|split|startsWith|strike|sub(?&gt;str|string)?|sup|to(?&gt;Locale(?&gt;LowerCase|UpperCase)|LowerCase|UpperCase)|trim(?&gt;Left|Right)?
)(?=\s*\()
</string>
					<key>name</key>
					<string>support.function.prototype.string.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
(?&lt;=\.)\s*(?&gt;
  add|concat|copyWithin|delete|entries|every|fill|filter|find(?&gt;Index)?|forEach|from|get|has|includes|indexOf|join|keys|lastIndexOf|map|next|pop|push|reduce(?&gt;Right)?|reverse|set|shift|slice|some|sort|splice|unshift|values
)(?=\s*\()
</string>
					<key>name</key>
					<string>support.function.prototype.array.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
(?&lt;=\.)\s*(?&gt;
  apply|bind|call|isGenerator
)(?=\s*\()
</string>
					<key>name</key>
					<string>support.function.prototype.function.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
(?&lt;=\.)\s*(?&gt;
  a(?&gt;bs|cos(?&gt;h)?|sin(?&gt;h)?|tan(?&gt;2|h)?)|cbrt|ceil|clz32|cos(?&gt;h)?|exp(?&gt;m1)?|floor|fround|hypot|imul|log(?&gt;10|1p|2)?|max|min|pow|random|round|sign|sin(?&gt;h)?|sqrt|tan(?&gt;h)?|trunc
)(?=\s*\()
</string>
					<key>name</key>
					<string>support.function.prototype.math.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
(?&lt;=\.)\s*(?&gt;
  appendChild|
  cloneNode|
  compareDocumentPosition|
  contains|
  hasChildNodes|
  insertBefore|
  is(?&gt;DefaultNamespace|EqualNode)|
  lookup(?&gt;NamespaceURI|Prefix)|
  normalize|
  removeChild|
  replaceChild|

  closest|
  get(?&gt;Attribute(?&gt;Node|NodeNS|NS)?|BoundingClientRect|ClientRects|ElementsBy(?&gt;ClassName|TagName|TagNameNS))|
  has(?&gt;Attribute(?&gt;NS|s)?)|
  insertAdjacentHTML|
  matches|
  query(?&gt;Selector(?&gt;All)?)|
  remove(?&gt;Attribute(?&gt;Node|NS)?)?|
  request(?&gt;Fullscreen|PointerLock)|
  scroll(?&gt;IntoView(?&gt;IntoViewIfNeeded)?)|
  set(?&gt;Attribute(?&gt;Node|NodeNS|NS)?|Capture)|

  addEventListener|
  detachEvent|
  dispatchEvent|
  fireEvent|
  removeEventListener|

  blur|
  click|
  focus(?&gt;SpellCheck)?|

  createEvent|
  preventDefault|
  stopImmediatePropagation|
  stopPropagation
)(?=\s*\()
</string>
					<key>name</key>
					<string>support.function.prototype.dom.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
(?&lt;=\.)\s*(?&gt;
  adoptNode|
  caret(?&gt;PositionFromPoint|RangeFromPoint)|
  clear|
  close|
  create(?&gt;Attribute|CDATASection|Comment|DocumentFragment|Element(?&gt;NS)?|EntityReference|Event|Expression|NodeIterator|NSResolver|ProcessingInstruction|Range|TextNode|TouchList|TreeWalker)|
  elementFromPoint|
  enableStyleSheetsForSet|
  evaluate|
  execCommand|
  exitPointerLock|
  get(?&gt;BoxObjectFor|Element(?&gt;ById|sBy(?&gt;ClassName|Name|TagName(?&gt;NS)?))|Selection)|
  hasFocus|
  importNode|
  loadOverlay|
  open|
  query(?&gt;CommandSupported|Selector(?&gt;All)?)|
  registerElement|
  releaseCapture|
  write(?&gt;ln)?
)(?=\s*\()
</string>
					<key>name</key>
					<string>support.function.prototype.document.js</string>
				</dict>
			</array>
		</dict>
		<key>var-in-statement</key>
		<dict>
			<key>begin</key>
			<string>\b(?&gt;var|let|const)\s+</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>storage.type.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=;)|(?&lt;!,|^|\s)\s*\n|(?=[\}\]\)])</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.terminator.statement.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.statement.var.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(,)\s*(?=\/\*|\/\/)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.delimiter.var.comma.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\*\/)\s*(?!\s|\/\*|\/\/)|(?&lt;=\n)</string>
					<key>name</key>
					<string>meta.var.comma-and-comment.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#line-comment</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#block-comment</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>,</string>
					<key>name</key>
					<string>meta.delimiter.var.comma.js</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>^\s*(?=\/\*|\/\/)</string>
					<key>end</key>
					<string>(?&lt;=\*\/)\s*(?!\s|\/\*|\/\/)|(?&lt;=\n)</string>
					<key>name</key>
					<string>meta.var.comment-line.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#line-comment</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#block-comment</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#line-comment-without-line-end</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)
(?=(?:\[|{))
</string>
					<key>end</key>
					<string>(?==|\s*(?&gt;in|of))</string>
					<key>name</key>
					<string>variable.declaration.destructuring.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#destructuring-pattern</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=[a-zA-Z_$][\w$]*)</string>
					<key>end</key>
					<string>(?=,|)</string>
					<key>name</key>
					<string>meta.var.identifier.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#reserved-word</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#special-assignment</string>
						</dict>
						<dict>
							<key>match</key>
							<string>(?!in|of)(\b[a-zA-Z_$][\w$]*)</string>
							<key>name</key>
							<string>variable.declaration.js</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(=)|(\s*(?&gt;in|of))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.in.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=[,;\}\]\)])|(?&lt;!,|^|\s|[&amp;|&lt;&gt;\+\-\*\/=\.])(?=\s*\n)</string>
					<key>name</key>
					<string>meta.var.assignment.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expressions</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>var-statement</key>
		<dict>
			<key>begin</key>
			<string>\b(?&gt;var|let|const)\s+</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>storage.type.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=;)|(?&lt;!,|^|\s)\s*\n|(?=[\}\]\)])</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.terminator.statement.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.statement.var.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(,)\s*(?=\/\*|\/\/)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.delimiter.var.comma.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\*\/)\s*(?!\s|\/\*|\/\/)|(?&lt;=\n)</string>
					<key>name</key>
					<string>meta.var.comma-and-comment.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#line-comment</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#block-comment</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>,</string>
					<key>name</key>
					<string>meta.delimiter.var.comma.js</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>^\s*(?=\/\*|\/\/)</string>
					<key>end</key>
					<string>(?&lt;=\*\/)\s*(?!\s|\/\*|\/\/)|(?&lt;=\n)</string>
					<key>name</key>
					<string>meta.var.comment-line.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#line-comment</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#block-comment</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#line-comment-without-line-end</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)
(?=(?:\[|{))
</string>
					<key>end</key>
					<string>(?==)</string>
					<key>name</key>
					<string>variable.declaration.destructuring.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#destructuring-pattern</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=[a-zA-Z_$][\w$]*)</string>
					<key>end</key>
					<string>(?=,|)</string>
					<key>name</key>
					<string>meta.var.identifier.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#reserved-word</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#special-assignment</string>
						</dict>
						<dict>
							<key>match</key>
							<string>([a-zA-Z_$][\w$]*)</string>
							<key>name</key>
							<string>variable.declaration.js</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(=)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=[,;\}\]\)])|(?&lt;!,|^|\s|[&amp;|&lt;&gt;\+\-\*\/=\.])(?=\s*\n)</string>
					<key>name</key>
					<string>meta.var.assignment.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expressions</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.js</string>
	<key>uuid</key>
	<string>93E017CC-6F27-11D9-90EB-000D93589AF7</string>
</dict>
</plist>
