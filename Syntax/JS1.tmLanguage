<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>comment</key>
	<string>JavaScript Syntax: version 0.1</string>
	<key>fileTypes</key>
	<array>
		<string>js</string>
		<string>htc</string>
		<string>jsx</string>
	</array>
	<key>firstLineMatch</key>
	<string>^#!/usr/bin/env node</string>
	<key>foldingStartMarker</key>
	<string>^.*\bfunction\s*(\w+\s*)?\([^\)]*\)(\s*\{[^\}]*)?\s*$</string>
	<key>foldingStopMarker</key>
	<string>^\s*\}</string>
	<key>keyEquivalent</key>
	<string>^~J</string>
	<key>name</key>
	<string>JavaScript1</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#statements</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>arguments-parentheses</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;=[a-zA-Z0-9_$\)\]\}])(?&lt;!return|yield|void|typeof)\s*\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.parameters.begin.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.parameters.end.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.arguments.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\,</string>
					<key>name</key>
					<string>meta.delimiter.parameter.comma.js</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expressions</string>
				</dict>
			</array>
		</dict>
		<key>array-initializer</key>
		<dict>
			<key>begin</key>
			<string>\[</string>
			<key>end</key>
			<string>\]</string>
			<key>name</key>
			<string>meta.declaration.array.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\,</string>
					<key>name</key>
					<string>meta.delimiter.object.comma.js</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expressions</string>
				</dict>
			</array>
		</dict>
		<key>arrow-function</key>
		<dict>
			<key>begin</key>
			<string>(?x)
(?&lt;![a-zA-Z0-9_$])
(?=
  (?&gt;
    [a-zA-Z_$][a-zA-Z0-9_$]*|
    [(][a-zA-Z0-9_$\s,]*[)]
  )
  (?&gt;\s*)=&gt;
)
</string>
			<key>end</key>
			<string>(?&lt;=})|(?=[\)\]},;]|$)</string>
			<key>name</key>
			<string>meta.function.arrow.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#arrow-parameter-declaration</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)
(?=
  (?&gt;[a-zA-Z_$][a-zA-Z0-9_$]*)
  (?&gt;\s*)=&gt;
)
</string>
					<key>end</key>
					<string>(?&gt;\s*)(=&gt;)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.function.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.parameter.function.arrow.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#reserved-word</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>variable.parameter.function.arrow.js</string>
								</dict>
							</dict>
							<key>match</key>
							<string>(?&gt;[a-zA-Z_$][a-zA-Z0-9_$]*)</string>
							<key>name</key>
							<string>meta.parameter.function.arrow.normal.js</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#statement-group</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expressions</string>
				</dict>
			</array>
		</dict>
		<key>arrow-parameter-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?x)
(?&lt;![a-zA-Z0-9_$])
[(]
(?=[a-zA-Z0-9_$\s,]*[)]\s*=&gt;)
</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.begin.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>([)])(?&gt;\s*(=&gt;))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.end.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.function.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.parameter.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#reserved-word</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;![a-zA-Z0-9_$])[a-zA-Z_$][a-zA-Z0-9_$]*</string>
					<key>name</key>
					<string>variable.parameter.function.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\,[ |\t]*</string>
					<key>name</key>
					<string>meta.delimiter.parameter.comma.js</string>
				</dict>
			</array>
		</dict>
		<key>block-comment</key>
		<dict>
			<key>begin</key>
			<string>/\*</string>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\*/</string>
			<key>name</key>
			<string>comment.block.js</string>
		</dict>
		<key>class-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?x)
\b(class)\b\s*
([a-zA-Z_$][a-zA-Z0-9_$]*)?\s*
(?:(extends)\s*([a-zA-Z_$][a-zA-Z0-9_$]*)?\s*)?
(?={)
</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.class.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.class.js</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.js</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>entity.other.inherited-class.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;=})</string>
			<key>name</key>
			<string>meta.class.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>{</string>
					<key>end</key>
					<string>}</string>
					<key>name</key>
					<string>meta.class.block.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#function-declaration</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#shorthand-function</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>node.js shebang</string>
					<key>match</key>
					<string>^#!/usr/bin/env node</string>
					<key>name</key>
					<string>comment.line.nodejs.js</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>/\*\*(?!/)</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block.documentation.js</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#block-comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#line-comment</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^(#!\/).*$\n?</string>
					<key>name</key>
					<string>comment.line.double-slash.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.html.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.html.js</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(&lt;!--|--&gt;)</string>
					<key>name</key>
					<string>comment.block.html.js</string>
				</dict>
			</array>
		</dict>
		<key>expression-group</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;![\}\]\)]|["'])\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.parentheses.begin.js</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Primary Expressions of Expressions</string>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.parentheses.end.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.brace.round.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expressions</string>
				</dict>
			</array>
		</dict>
		<key>expression-parentheses</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.parentheses.begin.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.parentheses.end.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.parentheses.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expressions</string>
				</dict>
			</array>
		</dict>
		<key>expressions</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\,</string>
					<key>name</key>
					<string>keyword.operator.comma.js</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#property-accessor</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#primary-expressions</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#keywords</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#new-expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#identifier-expressions</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#arguments-parentheses</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression-group</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\.(?![0-9])</string>
					<key>name</key>
					<string>meta.delimiter.method.period.js</string>
				</dict>
			</array>
		</dict>
		<key>for-statement</key>
		<dict>
			<key>begin</key>
			<string>(?x)
\b(for)\b\s*
(?=\(.*?\)\s*\{?)
</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.for.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;=})|(?&lt;=[)])(?!\s*\{)</string>
			<key>name</key>
			<string>meta.statement.for.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\(</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.parentheses.begin.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.parentheses.end.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.parentheses.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expressions</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\;</string>
							<key>name</key>
							<string>punctuation.terminator.statement.js</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#statements</string>
				</dict>
			</array>
		</dict>
		<key>function-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?x)
\b(function)(?=(?&gt;\s+(?&gt;\w|\$)+)?\s*\([^)]*\)\s*\{)
</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;=})</string>
			<key>name</key>
			<string>meta.function.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;=function)\s+(?=(?&gt;\w|\$)+\s*\()</string>
					<key>end</key>
					<string>\s*(?=\()</string>
					<key>name</key>
					<string>meta.name.function.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#reserved-word</string>
						</dict>
						<dict>
							<key>match</key>
							<string>(?&gt;\w|\$)+</string>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#parameter-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#statement-group</string>
				</dict>
			</array>
		</dict>
		<key>identifier-expressions</key>
		<dict>
			<key>begin</key>
			<string>(?=(\.)?(?&lt;![a-zA-Z0-9_$])[a-zA-Z_$][a-zA-Z0-9_$]*)</string>
			<key>end</key>
			<string>(?!(\s*\.\s*)?[a-zA-Z_$])(?&lt;=[a-zA-Z0-9_$])(?![a-zA-Z0-9_$])</string>
			<key>name</key>
			<string>meta.expression.identifier.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\.(?![0-9])</string>
					<key>name</key>
					<string>meta.delimiter.method.period.js</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#support-functions</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;![a-zA-Z0-9_$])[a-zA-Z_$][a-zA-Z0-9_$]*(?=\s*\()</string>
					<key>name</key>
					<string>support.function.any-method.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;![a-zA-Z0-9_$])[a-zA-Z_$][a-zA-Z0-9_$]*(?=\s*\()</string>
					<key>name</key>
					<string>meta.invocation.function.js</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#special-assignment</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
(?&lt;=\.)\s*(?&gt;
  M(?&gt;IN_VALUE|AX_VALUE)|
  SQRT(?&gt;1_2|2)|
  NEGATIVE_INFINITY|
  URLUnencoded|
  P(?&gt;I|OSITIVE_INFINITY)|
  E|
  L(?&gt;N(?&gt;10|2)|OG(?&gt;10E|2E))
)(?![a-zA-Z0-9_$])
</string>
					<key>name</key>
					<string>support.constant.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
(?&lt;![a-zA-Z0-9_$])(?&gt;
  Math|Number
)(?![a-zA-Z0-9_$])
</string>
					<key>name</key>
					<string>support.class.language.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;![a-zA-Z0-9_$])[_]*[A-Z](?![A-Z_]+(?&gt;\s|\.))[a-zA-Z0-9_$]*(?=\s*\.)</string>
					<key>name</key>
					<string>support.class.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=\.)\s*[a-zA-Z_$][a-zA-Z0-9_$]*</string>
					<key>name</key>
					<string>support.other.property-name.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?&gt;console|document|window|self|undefined|NaN|that)\b</string>
					<key>name</key>
					<string>support.variable.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;![a-zA-Z0-9_$])[a-zA-Z_$][a-zA-Z0-9_$]*(?=\s*\.)</string>
					<key>name</key>
					<string>variable.other.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;![a-zA-Z0-9_$])[a-zA-Z_$][a-zA-Z0-9_$]*</string>
					<key>name</key>
					<string>variable.other.js</string>
				</dict>
			</array>
		</dict>
		<key>keywords</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(?&gt;delete|new|typeof|void|with)(?![a-zA-Z0-9_$])</string>
					<key>name</key>
					<string>keyword.operator.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>!|%|&amp;|\*|\/|\-\-|\-|\+\+|\+|~|===|==|=|!=|!==|&lt;=|&gt;=|&lt;&lt;=|&gt;&gt;=|&gt;&gt;&gt;=|&lt;&gt;|&lt;|&gt;|!|&amp;&amp;|\|\||\?|\:|\*=|(?&lt;!\()/=|%=|\+=|\-=|&amp;=|\^=|\b(?&gt;in(?&gt;stanceof)?|of)(?![a-zA-Z0-9_$])</string>
					<key>name</key>
					<string>keyword.operator.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?&gt;class|function|var|let)(?![a-zA-Z0-9_$])</string>
					<key>name</key>
					<string>storage.type.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?&gt;export|extends)(?![a-zA-Z0-9_$])</string>
					<key>name</key>
					<string>storage.modifier.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?&gt;break|case|catch|continue|default|do|else|finally|for|goto|if|import|package|return|switch|throw|try|while|yield(?&gt;\*)?)(?![a-zA-Z0-9_$])</string>
					<key>name</key>
					<string>keyword.control.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?&gt;super|this|arguments)(?![a-zA-Z0-9_$])</string>
					<key>name</key>
					<string>variable.language.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\btrue(?![a-zA-Z0-9_$])</string>
					<key>name</key>
					<string>constant.language.boolean.true.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\bfalse(?![a-zA-Z0-9_$])</string>
					<key>name</key>
					<string>constant.language.boolean.false.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\bnull(?![a-zA-Z0-9_$])</string>
					<key>name</key>
					<string>constant.language.null.js</string>
				</dict>
			</array>
		</dict>
		<key>line-comment</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.js</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(//).*$\n?</string>
			<key>name</key>
			<string>comment.line.double-slash.js</string>
		</dict>
		<key>line-comment-without-line-end</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.js</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(//).*$</string>
			<key>name</key>
			<string>comment.line.double-slash.js</string>
		</dict>
		<key>new-expression</key>
		<dict>
			<key>begin</key>
			<string>(?x)
(?&lt;=new)(?&lt;![a-zA-Z0-9_$]new)
(?=\s+(?!
  (?&gt;await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|false|finally|for|function|let|if|implements|import|in(?&gt;stanceof|terface)?|new|null|private|protected|package|public|static|return|super|switch|this|throw(?&gt;s)?|true|try|typeof|var|void|while|with|yield)
  (?![a-zA-Z0-9_$])
)[a-zA-Z_$][a-zA-Z0-9_$]*)
</string>
			<key>end</key>
			<string>(?!(\s*\.\s*)?[a-zA-Z_$])(?&lt;=[a-zA-Z0-9_$])(?![a-zA-Z0-9_$])</string>
			<key>name</key>
			<string>meta.expression.new.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\.(?![0-9])</string>
					<key>name</key>
					<string>meta.delimiter.method.period.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;![a-zA-Z0-9_$])[a-zA-Z_$][a-zA-Z0-9_$]*</string>
					<key>name</key>
					<string>support.class.js</string>
				</dict>
			</array>
		</dict>
		<key>numeric</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;![a-zA-Z0-9_$])\.[0-9]+\b</string>
					<key>name</key>
					<string>constant.numeric.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\b(?&lt;!\.)(?&gt;0(?&gt;o|O|(?![bBxX]))[0-7]+(?![0-9]+))((?:\.[0-9])|[a-zA-Z8-9_$][a-zA-Z0-9_$]*)?</string>
					<key>name</key>
					<string>constant.numeric.octal.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\b(?&lt;!\.)(?&gt;0(?&gt;b|B)[0-1]+)([a-zA-Z2-9_$][a-zA-Z0-9_$]*)?</string>
					<key>name</key>
					<string>constant.numeric.binary.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\b(?&lt;!\.)[0-9]+\.(?:[0-9]*([a-zA-Z_$][a-zA-Z0-9_$]*)?)</string>
					<key>name</key>
					<string>constant.numeric.js</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\b(?&lt;!\.)(?&gt;(?&gt;0(?&gt;x|X)[0-9a-fA-F]+)|(?&gt;[0-9]+))([a-zA-Z_$][a-zA-Z0-9_$]*)?</string>
					<key>name</key>
					<string>constant.numeric.js</string>
				</dict>
			</array>
		</dict>
		<key>object-initializer</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>end</key>
			<string>\}</string>
			<key>name</key>
			<string>meta.declaration.object.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)
(?:
  ([0-9]+)|
  (?:([a-zA-Z_?$][\w?.$]*)|(("|')((?:(?!\4).|(\\\4))*)(\4)))(?=\s*:\s*function(?![a-zA-Z0-9_$]))|
  (?:([a-zA-Z_?$][\w?.$]*)|(("|')(?:(?!\10).|(\\\10))*(\10)))
)\s*(:)
</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.js</string>
						</dict>
						<key>10</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
						<key>11</key>
						<dict>
							<key>name</key>
							<string>constant.character.escape.js</string>
						</dict>
						<key>12</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
						<key>13</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.property.js</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>string.quoted.single.js</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.js</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>constant.character.escape.js</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
						<key>8</key>
						<dict>
							<key>name</key>
							<string>entity.name.property.js</string>
						</dict>
						<key>9</key>
						<dict>
							<key>name</key>
							<string>string.quoted.single.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(,)\s*|(?=})</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.delimiter.object.comma.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.object.property.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expressions</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>\,</string>
					<key>name</key>
					<string>meta.delimiter.object.comma.js</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#property-function</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#shorthand-generator-function</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#shorthand-function</string>
				</dict>
			</array>
		</dict>
		<key>parameter-declaration</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.begin.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.end.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.parameter.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#reserved-word</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;![a-zA-Z0-9_$])[a-zA-Z_$][a-zA-Z0-9_$]*</string>
					<key>name</key>
					<string>variable.parameter.function.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\,[ |\t]*</string>
					<key>name</key>
					<string>meta.delimiter.parameter.comma.js</string>
				</dict>
			</array>
		</dict>
		<key>parentheses-statement</key>
		<dict>
			<key>begin</key>
			<string>(?x)
\b(if|while|switch)\b\s*
(?=\(.*?\)\s*\{?)
</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.for.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;=})|(?&lt;=[)])(?!\s*\{)</string>
			<key>name</key>
			<string>meta.statement.parentheses.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression-parentheses</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#statements</string>
				</dict>
			</array>
		</dict>
		<key>primary-expressions</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#numeric</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-expressions</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#regular-expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#arrow-function</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#object-initializer</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#array-initializer</string>
				</dict>
			</array>
		</dict>
		<key>property-accessor</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;=[a-zA-Z0-9_$\)\]\}])(?&lt;!return|yield|void|typeof)\s*\[</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.accessor.begin.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\]</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.accessor.end.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.accessor.property.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expressions</string>
				</dict>
			</array>
		</dict>
		<key>property-function</key>
		<dict>
			<key>begin</key>
			<string>(?x)
(?&lt;![a-zA-Z0-9_$])(get|set)\s+
(?&lt;![a-zA-Z0-9_$])(?&gt;([a-zA-Z_$][a-zA-Z0-9_$]*))\s*
(?=\([^\)]*\)\s*{)
</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.property.function.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;=})</string>
			<key>name</key>
			<string>meta.methods.property.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#parameter-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#statement-group</string>
				</dict>
			</array>
		</dict>
		<key>regexp</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\[bBAZzG]|[$^]</string>
					<key>name</key>
					<string>keyword.other.control.anchors.regexp.js</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\[(\^?\])?</string>
					<key>end</key>
					<string>\]</string>
					<key>name</key>
					<string>string.regexp.set.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\[:\^?(?&gt;alnum|alpha|ascii|blank|cntrl|digit|graph|lower|print|punct|space|upper|xdigit|word):\]</string>
							<key>name</key>
							<string>constant.other.posix-bracket.regexp.js</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#set</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#character_class</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#character_property</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#special_escapes</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#escaped_char</string>
						</dict>
						<dict>
							<key>match</key>
							<string>.-[^\]]</string>
							<key>name</key>
							<string>constant.other.range.regexp.js</string>
						</dict>
						<dict>
							<key>match</key>
							<string>(?&lt;!\[)&amp;&amp;(?!\])</string>
							<key>name</key>
							<string>keyword.operator.intersection.regexp.js</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x) ((?#1)\()
((?#2)\?
  (?:
   &lt;[=!]
  |[&gt;=:!]
  |[imx]{,3}(?:-[imx]{1,3})?(?::(?!\))|(?=\)))
  |[&lt;']((?#3)\w+)[&gt;']
  )
)?
</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.regexp.group.begin</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>string.regexp constant.other.assertion.regexp</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.other.regexp</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>storage.type.regexp.group.end</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.regexp.group</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#regexp</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.regexp</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.other.backref.regexp</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.other.regexp</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
 (\\\d+)
|(\\k[&lt;'](-?\d+|\w+([-+]\d+)?)[&gt;'])
</string>
					<key>name</key>
					<string>keyword.other.backref.regexp.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>((?&lt;!\()[?*+][?+]?)|\{\d*(,\d*)?\}</string>
					<key>name</key>
					<string>support.operator.quantifier.regexp.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\[wWsSdDhH]|\.</string>
					<key>name</key>
					<string>keyword.control.character-class.regexp.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)\\
([tvnrbfae]   (?# general chars)
|[0-8]{3}     (?# octal)
|x\h\h        (?# hexadecimal)
|x\{7\h{7}\}  (?# wide hexadecimal)
|c\d+         (?# control char)
|M-(\\C-)?\d+ (?# meta control char)
|C-\d+        (?# control char 2)
)
</string>
					<key>name</key>
					<string>constant.character.escape.special.regexp.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>constant.character.escape.general.regexp.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>.</string>
					<key>name</key>
					<string>meta.regexp.other.js</string>
				</dict>
			</array>
		</dict>
		<key>regular-expression</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;=[=(:\[,+\-*\/!?&lt;&gt;]|return|yield|void|typeof|yield\*|&amp;&amp;|\|\||^)\s*(/)(?![/*+{}?])</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(/)[igm]*</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.regexp.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#regexp</string>
				</dict>
			</array>
		</dict>
		<key>reserved-word</key>
		<dict>
			<key>match</key>
			<string>(?x)
\b(?&gt;
  await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|false|finally|for|function|let|if|implements|import|in(?&gt;stanceof|terface)?|new|null|private|protected|package|public|static|
  return|super|switch|this|throw(?&gt;s)?|true|try|typeof|var|void|while|with|yield(?&gt;\*)?
)(?![a-zA-Z0-9_$]) # abstract|boolean|byte|char|double|final|float|goto|int|long|native|short|synchronized|transient|volatile|
</string>
			<key>name</key>
			<string>meta.invalid</string>
		</dict>
		<key>shorthand-function</key>
		<dict>
			<key>begin</key>
			<string>(?x)
(?&lt;![a-zA-Z0-9_$])(?:(constructor)|([a-zA-Z_$][a-zA-Z0-9_$]*))\s*
(?=\([^\)]*\)\s*{)
</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.constructor.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;=})</string>
			<key>name</key>
			<string>meta.class.methods.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#parameter-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#statement-group</string>
				</dict>
			</array>
		</dict>
		<key>shorthand-generator-function</key>
		<dict>
			<key>begin</key>
			<string>(?x)
(\*)\s*
((?&lt;![a-zA-Z0-9_$])[a-zA-Z_$][a-zA-Z0-9_$]*\s*)?
(?=\([^\)]*\)\s*{)
</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.js</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;=})</string>
			<key>name</key>
			<string>meta.function.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#parameter-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#statement-group</string>
				</dict>
			</array>
		</dict>
		<key>special-assignment</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;![a-zA-Z0-9_$])[a-zA-Z_$][a-zA-Z0-9_$]*(?=\s*\=\s*class(?!\$)\b)</string>
					<key>name</key>
					<string>entity.name.class.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;![a-zA-Z0-9_$])[A-Z][a-zA-Z0-9_$]*(?=\s*\=\s*function(?!\$)\b)</string>
					<key>name</key>
					<string>entity.name.class.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;![a-zA-Z0-9_$])[a-zA-Z_$][a-zA-Z0-9_$]*(?=\s*\=\s*function(?!\$)\b)</string>
					<key>name</key>
					<string>entity.name.function.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
\s*(?&lt;![a-zA-Z0-9_$])
[a-zA-Z_$][a-zA-Z0-9_$]*
(?=
  (?&gt;\s*)\=(?&gt;\s*)
  (?&gt;
    ([a-zA-Z_$][a-zA-Z0-9_$]*)|
    (\()([a-zA-Z0-9_$\s,]*)(\))
  )
  (?&gt;\s*)=&gt;
)
</string>
					<key>name</key>
					<string>entity.name.function.arrow.js</string>
				</dict>
			</array>
		</dict>
		<key>statement-group</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;![=(:\[,+\-*\/!?&lt;&gt;]|return|yield|void|typeof|yield\*|&amp;&amp;|\|\||\s)\s*\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.statementgroup.begin.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.statementgroup.end.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.statement-group</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#statements</string>
				</dict>
			</array>
		</dict>
		<key>statements</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#class-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#for-statement</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#var-statement</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#parentheses-statement</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#statement-group</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expressions</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\;</string>
					<key>name</key>
					<string>punctuation.terminator.statement.js</string>
				</dict>
			</array>
		</dict>
		<key>string-expressions</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>'</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>'</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)</string>
							<key>name</key>
							<string>constant.character.escape.js</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>"</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.js</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)</string>
							<key>name</key>
							<string>constant.character.escape.js</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>support-functions</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?x)
(?&lt;=\.)\s*(?&gt;
  __define(?&gt;Getter|Setter)__|__lookup(?&gt;Getter|Setter)__|hasOwnProperty|isPrototypeOf|propertyIsEnumerable|to(?&gt;LocaleString|Source|String)|unwatch|valueOf|watch
)\b(?=\s*\()
</string>
					<key>name</key>
					<string>support.function.prototype.object.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
(?&lt;=\.)\s*(?&gt;
  to(?&gt;Exponential|Fixed|Precision)
)\b(?=\s*\()
</string>
					<key>name</key>
					<string>support.function.prototype.number.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
(?&lt;=\.)\s*(?&gt;
  anchor|big|blink|bold|char(?&gt;At|CodeAt)|codePointAt|concat|endsWith|fixed|font(?&gt;color|size)|includes|indexOf|italics|lastIndexOf|link|localeCompare|match|normalize|quote|repeat|replace|search|slice|small|split|startsWith|strike|sub(?&gt;str|string)?|sup|to(?&gt;Locale(?&gt;LowerCase|UpperCase)|LowerCase|UpperCase)|trim(?&gt;Left|Right)?
)\b(?=\s*\()
</string>
					<key>name</key>
					<string>support.function.prototype.string.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
(?&lt;=\.)\s*(?&gt;
  concat|copyWithin|entries|every|fill|filter|find(?&gt;Index)?|forEach|includes|indexOf|join|keys|lastIndexOf|map|pop|push|reduce(?&gt;Right)?|reverse|shift|slice|some|sort|splice|unshift|values
)\b(?=\s*\()
</string>
					<key>name</key>
					<string>support.function.prototype.array.js</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
(?&lt;=\.)\s*(?&gt;
  apply|bind|call|isGenerator
)\b(?=\s*\()
</string>
					<key>name</key>
					<string>support.function.prototype.function.js</string>
				</dict>
			</array>
		</dict>
		<key>var-statement</key>
		<dict>
			<key>begin</key>
			<string>\bvar\s+</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>storage.type.js</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(;)|(?&lt;!,|^|\s)\s*\n|(?=[\}\]\)])</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.terminator.statement.js</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.statement.var.js</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(,)\s*(?=\/\*|\/\/)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.delimiter.var.comma.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\*\/)\s*(?!\s|\/\*|\/\/)|(?&lt;=\n)</string>
					<key>name</key>
					<string>meta.var.comma-and-comment.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#line-comment</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#block-comment</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>,</string>
					<key>name</key>
					<string>meta.delimiter.var.comma.js</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>^\s*(?=\/\*|\/\/)</string>
					<key>end</key>
					<string>(?&lt;=\*\/)\s*(?!\s|\/\*|\/\/)|(?&lt;=\n)</string>
					<key>name</key>
					<string>meta.var.comment-line.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#line-comment</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#block-comment</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#line-comment-without-line-end</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=[a-zA-Z_$][a-zA-Z0-9_$]*)</string>
					<key>end</key>
					<string>(?=,|)</string>
					<key>name</key>
					<string>meta.var.identifier.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#reserved-word</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#special-assignment</string>
						</dict>
						<dict>
							<key>match</key>
							<string>([a-zA-Z_$][a-zA-Z0-9_$]*)</string>
							<key>name</key>
							<string>variable.declaration.js</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(=)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.declaration.variable.js</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=[,;\}\]\)])|(?&lt;!,|^|\s|[&amp;|&lt;&gt;\+\-\*\/=\.])(?=\s*\n)</string>
					<key>name</key>
					<string>meta.var.assignment.js</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expressions</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.js</string>
	<key>uuid</key>
	<string>93E017CC-6F27-11D9-90EB-000D93589AF7</string>
</dict>
</plist>
