# [PackageDev] target_format: plist, ext: tmLanguage
---
name: JavaScript1
comment: 'JavaScript Syntax: version 0.1'
fileTypes: [js, htc, jsx]
scopeName: source.js
uuid: 93E017CC-6F27-11D9-90EB-000D93589AF7

firstLineMatch: ^#!/usr/bin/env node
foldingStartMarker: ^.*\bfunction\s*(\w+\s*)?\([^\)]*\)(\s*\{[^\}]*)?\s*$
foldingStopMarker: ^\s*\}
keyEquivalent: ^~J

patterns:
- include: '#statements'

repository:

# control sequences
  comments:
    patterns:
    - name: comment.line.nodejs.js
      comment: node.js shebang
      match: ^#!/usr/bin/env node
    - name: comment.block.documentation.js
      begin: /\*\*(?!/)
      end: \*/
      captures:
        '0': {name: punctuation.definition.comment.js}
    - include: '#block-comment'
    - include: '#line-comment'
    - name: comment.line.double-slash.js
      match: ^(#!\/).*$\n?
      captures:
        '1': {name: punctuation.definition.comment.js}
    - name: comment.block.html.js
      match: (<!--|-->)
      captures:
        '0': {name: punctuation.definition.comment.html.js}
        '2': {name: punctuation.definition.comment.html.js}

  block-comment:
    name: comment.block.js
    begin: /\*
    end: \*/
    captures:
      '0': {name: punctuation.definition.comment.js}

  line-comment:
    name: comment.line.double-slash.js
    match: (//).*$\n?
    captures:
      '1': {name: punctuation.definition.comment.js}

  line-comment-without-line-end:
    name: comment.line.double-slash.js
    match: (//).*$ #\n?
    captures:
      '1': {name: punctuation.definition.comment.js}

# statements
  statements:
    patterns:
    - include: '#comments'
    - include: '#class-declaration'
    - include: '#for-statement'
    - include: '#var-statement'
    - include: '#parentheses-statement'
    - include: '#statement-group'
    - include: '#labeled-statement-group'
    - include: '#expressions'
    - name: punctuation.terminator.statement.js
      match: \;

  for-statement: 
    name: meta.statement.for.js
    begin: |
      (?x)
      \b(for)\b\s*
      (?=\(.*?\)\s*\{?)
    beginCaptures:
      '1': {name: keyword.control.for.js}
    end: (?<=})|(?<=\))(?!\s*\{)
    patterns:
    - name: meta.parentheses.js
      begin: \(
      beginCaptures:
        '0': {name: punctuation.parentheses.begin.js}
      end: \)
      endCaptures:
        '0': {name: punctuation.parentheses.end.js}
      patterns:
      - include: '#var-statement'
      - include: '#expressions'
      - name: punctuation.terminator.statement.js
        match: \;
    - include: '#statements'

  var-statement:
    name: meta.statement.var.js
    begin: \b(?>var|let|const)\s+
    beginCaptures:
      '0': {name: storage.type.js}
    end: (;)|(?<!,|^|\s)\s*\n|(?=[\}\]\)])
    endCaptures:
      '1': {name: punctuation.terminator.statement.js}
    patterns:
    - name: meta.var.comma-and-comment.js
      begin: (,)\s*(?=\/\*|\/\/)
      beginCaptures:
        '1': {name: meta.delimiter.var.comma.js}
      end: (?<=\*\/)\s*(?!\s|\/\*|\/\/)|(?<=\n)
      patterns:
      - include: '#line-comment'
      - include: '#block-comment'
    - name: meta.delimiter.var.comma.js
      match: ','
    - name: meta.var.comment-line.js
      begin: ^\s*(?=\/\*|\/\/)
      end: (?<=\*\/)\s*(?!\s|\/\*|\/\/)|(?<=\n)
      patterns:
      - include: '#line-comment'
      - include: '#block-comment'
    - include: '#line-comment-without-line-end'
    - include: '#comments'
    - name: variable.declaration.destructuring.js
      begin: |
        (?x)
        (?=(?:\[|{))
      end: (?==)
      patterns:
      - include: '#destructuring-pattern'
    - name: meta.var.identifier.js
      begin: (?=[a-zA-Z_$][\w$]*)
      end: (?=,|)
      patterns:
      - include: '#reserved-word'
      - include: '#special-assignment'
      - name: variable.declaration.js
        match: ([a-zA-Z_$][\w$]*)
    - name: meta.var.assignment.js
      begin: (=)
      beginCaptures:
        '1': {name: keyword.operator.assignment.js}
        #'1': {name: punctuation.declaration.variable.js}
      end: (?=[,;\}\]\)])|(?<!,|^|\s|[&|<>\+\-\*\/=\.])(?=\s*\n)
      patterns:
      - include: '#expressions'

  parentheses-statement: 
    name: meta.statement.parentheses.js
    begin: |
      (?x)
      \b(if|while|switch)\b\s*
      (?=\(.*?\)\s*\{?)
    beginCaptures:
      '1': {name: keyword.control.for.js}
    end: (?<=})|(?<=\))(?!\s*\{)
    patterns:
    - include: '#expression-parentheses'
    - include: '#statements'

  statement-group:
    name: meta.statement-group.js
    begin: (?>(?<![=(:\[,+\-*\/!?<>]|return|yield|void|typeof|&&|\|\||\s)|(?<==>|\*/))\s*\{
    beginCaptures:
      '0': {name: punctuation.definition.statementgroup.begin.js}
    end: \}
    endCaptures:
      '0': {name: punctuation.definition.statementgroup.end.js}
    patterns:
    - include: '#statements'

  raw-statement-group:
    name: meta.statement-group.js
    begin: \{
    beginCaptures:
      '0': {name: punctuation.definition.statementgroup.begin.js}
    end: \}
    endCaptures:
      '0': {name: punctuation.definition.statementgroup.end.js}
    patterns:
    - include: '#statements'

  labeled-statement-group:
    name: meta.labeled-statement-group.js
    begin: ([a-zA-Z_$][\w$]*)\s*(\:)\s*(\{)
    beginCaptures:
      '2': {name: keyword}
      '3': {name: punctuation.definition.statementgroup.begin.js}
    end: \}
    endCaptures:
      '0': {name: punctuation.definition.statementgroup.end.js}
    patterns:
    - include: '#statements'


# expressions
  expressions:
    patterns:
    - include: '#comments'
    - name: keyword.operator.comma.js #meta.delimiter.object.comma.js
      match: \, #[ |\t]*
    - include: '#property-accessor'
    - include: '#destructuring-assignment'
    - include: '#primary-expressions'
    - include: '#keywords'
    - include: '#new-expression'
    - include: '#identifier-expressions'
    - include: '#arguments-parentheses'
    - include: '#expression-group'
    
    - name: meta.delimiter.method.period.js
      match: \.(?!\d)

  expression-group:
    name: meta.brace.round.js
    comment: Primary Expressions of Expressions
    begin: (?<![\}\]\)]|["'])\(
    beginCaptures:
      '0': {name: punctuation.parentheses.begin.js}
    end: \)
    endCaptures:
      '0': {name: punctuation.parentheses.end.js}
    patterns:
    - include: '#expressions'

  primary-expressions:
    patterns:
    - include: '#numeric'
    - include: '#string-expressions'
    - include: '#regular-expression'
    - include: '#arrow-function'
    - include: '#function-declaration'
    - include: '#object-initializer'
    - include: '#array-initializer'

  string-expressions:
    patterns:
    - name: string.quoted.single.js
      begin: "'"
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.js}
      end: "'"
      endCaptures:
        '0': {name: punctuation.definition.string.end.js}
      patterns:
      - name: constant.character.escape.js
        match: '\\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)'
    - name: string.quoted.double.js
      begin: '"'
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.js}
      end: '"'
      endCaptures:
        '0': {name: punctuation.definition.string.end.js}
      patterns:
      - name: constant.character.escape.js
        match: '\\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)'

  regular-expression:
    name: string.regexp.js
    begin: (?<=[=(:\[,+\-*\/!?<>]|return|yield|void|typeof|&&|\|\||^)\s*(/)(?![/*+{}?])
    beginCaptures:
      '1': {name: punctuation.definition.string.begin.js}
    end: (/)[igm]*
    endCaptures:
      '1': {name: punctuation.definition.string.end.js}
    patterns:
    - include: '#regexp'

  new-expression:
    name: meta.expression.new.js
    begin: |
      (?x)
      (?<=new)(?<![\w$]new)
      (?=\s+(?!
        (?>await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|false|finally|for|function|let|if|implements|import|in(?>stanceof|terface)?|new|null|private|protected|package|public|static|return|super|switch|this|throw(?>s)?|true|try|typeof|var|void|while|with|yield)
        (?![\w$])
      )[a-zA-Z_$][\w$]*)
    end: (?!(\s*\.\s*)?[a-zA-Z_$])(?<=[\w$])(?![\w$])
    patterns:
    - name: meta.delimiter.method.period.js
      match: \.(?!\d)
    - name: storage.other.js #keyword.storage.js #support.class.js
      match: (?<![\w$])[a-zA-Z_$][\w$]*

  special-assignment:
    patterns:
    - name: entity.name.class.js
      match: (?<![\w$])[a-zA-Z_$][\w$]*(?=\s*\=\s*class(?!\$)\b)
    - name: entity.name.class.js
      match: (?<![\w$])[A-Z][\w$]*(?=\s*\=\s*function(?!\$)\b)
    - name: entity.name.function.js
      match: (?<![\w$])[a-zA-Z_$][\w$]*(?=\s*\=\s*function(?!\$)\b)
    - name: entity.name.function.arrow.js
      match: |
        (?x)
        \s*(?<![\w$])
        [a-zA-Z_$][\w$]*
        (?=
          (?>\s*)\=(?>\s*)
          (?>
            [a-zA-Z_$][\w$]*|
            \([\w$\s,={}\[\]\.:]*\)
          )
          (?>\s*)=>
        )
      # match: |
      #   (?x)
      #   \s*(?<![\w$])
      #   [a-zA-Z_$][\w$]*
      #   (?=
      #     (?>\s*)\=(?>\s*)
      #     (?>
      #       ([a-zA-Z_$][\w$]*)|
      #       (\()([\w$\s,]*)(\))
      #     )
      #     (?>\s*)=>
      #   )

  identifier-expressions:
    name: meta.expression.identifier.js
    begin: (?=(\.)?(?<![\w$])[a-zA-Z_$][\w$]*)
    end: (?!(\s*\.\s*)?[a-zA-Z_$])(?<=[\w$])(?![\w$])
    patterns:
    - name: meta.delimiter.method.period.js
      match: \.(?!\d)
    - include: '#support-functions'
    - name: support.function.any-method.js #entity.identifier.function.other-method.js # (?<=\.|)\s*
      match: (?<![\w$])[a-zA-Z_$][\w$]*(?=\s*\()
    - name: meta.invocation.function.js # (?<=\.|)\s*
      match: (?<![\w$])[a-zA-Z_$][\w$]*(?=\s*\()
    - include: '#special-assignment'
    - name: support.constant.js
      # X(?>MLDocument|SLDocument)|
      match: |
        (?x)
        (?<=\.)\s*(?>
          E(?>PSILON)?|
          M(?>IN_VALUE|AX_VALUE)|
          SQRT(?>1_2|2)|
          NEGATIVE_INFINITY|
          URLUnencoded|
          P(?>I|OSITIVE_INFINITY)|
          L(?>N(?>10|2)|OG(?>10E|2E))
        )(?![\w$])
    - name: support.class.language.js
      match: |
        (?x)
        (?<![\w$])(?>
          Math|Number|Object|Array|Map|Set|WeakMap|WeakSet
        )(?![\w$])
    # - name: support.class.js #entity.name.class.js #support.class.js #meta.identifier.js
      # match: (?<![\w$])[_]*[A-Z](?![A-Z_]+(?>\s|\.))[\w$]*(?=\s*\.) # ()
    # - name: support.class.js #entity.name.class.js #support.class.js #null # (?<![\w$])
      # match: (?<=\.)\s*[A-Z](?![A-Z_]+(?>\s|\.))[\w$]*(?![\w$])(?!\s*\=)
    # - name: support.other.property-name.js # entity.name.property.js
    #   match: (?<=\.)\s*[a-zA-Z_$][\w$]*(?=\s*(?:(?:[+\-*/%&\^|]|\*\*|<<|>>|>>>)?=(?!=)|\+\+|\-\-))
    - name: meta.other.property-name.js #support.other.property-name.js #entity.name.other-property #entity.name.property #support.constant.js #meta.identifier.js
      match: (?<=\.)\s*[a-zA-Z_$][\w$]*
    - name: support.variable.js
      match: \b(?>console|document|window|self|undefined|NaN|that)\b
    - name: variable.other.js #meta.identifier.js #support.class.js
      match: (?<![\w$])[a-zA-Z_$][\w$]*(?=\s*\.)
    - name: variable.other.js #meta.identifier.js
      match: (?<![\w$])[a-zA-Z_$][\w$]*


  destructuring-assignment:
    name: meta.destructuring.js
    begin: |
      (?x)
      (?=(?:\[[\s\w$,:\.\[\]\{\}]*\]|{[\s\w$,:\.\[\]\{\}]*})\s*=)
    end: (?==)
    patterns:
    - include: '#destructuring-pattern'

  destructuring-pattern:
    name: meta.destructuring.pattern.js
    patterns:
    - name: meta.destructuring.pattern.object.js
      begin: \{
      beginCaptures:
        '0': {name: punctuation.destructuring.begin.js}
      end: \}
      endCaptures:
        '0': {name: punctuation.destructuring.end.js}
      patterns:
      - name: meta.normal.js # variable.other.js # hack
        match: \s+
      - name: meta.delimiter.parameter.comma.js
        match: \,
      - name: entity.name.property.destructuring.js
        match: '[a-zA-Z_$][\w$]*\s*(?=:)'
      - name: punctuation.definition.property.js
        match: ':'
      - name: punctuation.rest-parameter.js
        match: \.{3}
      - include: '#destructuring-pattern'
    - name: meta.destructuring.pattern.array.js
      begin: \[
      beginCaptures:
        '0': {name: punctuation.destructuring.begin.js}
      end: \]
      endCaptures:
        '0': {name: punctuation.destructuring.end.js}
      patterns:
      - name: meta.normal.js # variable.other.js # hack
        match: \s+
      - name: meta.delimiter.parameter.comma.js
        match: \,
      - name: punctuation.rest-parameter.js
        match: \.{3}
      - include: '#destructuring-pattern'

# declarations
  class-declaration:
    name: meta.class.js
    begin: |
      (?x)
      \b(class)\b\s*
      ([a-zA-Z_$][\w$]*)?\s*
      (?=
      (?:(e(?>x(?>t(?>e(?>n(?>ds?)?)?)?)?)?)(?![\w$])\s*([a-zA-Z_$][\w$\.]*)?\s*)?
      (?={)
      )
    beginCaptures:
      '1': {name: storage.type.class.js}
      '2': {name: entity.name.class.js} #support.class.js
      # '3': {name: storage.modifier.js}
      # '4': {name: entity.other.inherited-class.js} #support.class.js
    end: (?<=})
    patterns:
    - name: meta.extends.js
      begin: (?<![\w$])(extends)\s+(?=[a-zA-Z_$])
      beginCaptures:
        '1': {name: storage.modifier.js}
      end: (?={)
      patterns:
      - name: meta.delimiter.method.period.js
        match: \.(?!\d)
      - name: entity.other.inherited-class.js
        match: (?<![\w$])[a-zA-Z_$][\w$]*
    - name: storage.modifier.js
      match: (?<![\w$])extends(?![\w$])
    - name: meta.class.block.js
      begin: '{'
      beginCaptures:
        '0': {name: punctuation.definition.class.js}
      end: '}'
      endCaptures:
        '0': {name: punctuation.definition.class.js}
      patterns:
      - include: '#comments'
      # - include: '#function-declaration'
      - include: '#property-function'
      - include: '#shorthand-generator-function'
      - include: '#shorthand-function'
      - name: storage.type.js
        match: (?<![\w$])(?>get|set)(?![\w$])
      - name: storage.modifier.js
        match: (?<![\w$])(?>static)(?![\w$])

  # class-declaration:
  #   name: meta.class.js
  #   begin: |
  #     (?x)
  #     \b(class)\b\s*
  #     ([a-zA-Z_$][\w$]*)?\s*
  #     (?:(extends)\s*([a-zA-Z_$][\w$]*)?\s*)?
  #     (?={)
  #   beginCaptures:
  #     '1': {name: storage.type.class.js}
  #     '2': {name: entity.name.class.js} #support.class.js
  #     '3': {name: storage.modifier.js}
  #     '4': {name: entity.other.inherited-class.js} #support.class.js
  #   end: (?<=})
  #   patterns:
  #   - name: meta.class.block.js
  #     begin: '{'
  #     end: '}'
  #     patterns:
  #     - include: '#comments'
  #     # - include: '#function-declaration'
  #     - name: storage.modifier.js
  #       match: (?<![\w$])(?>static)(?![\w$])
  #     - include: '#property-function'
  #     - include: '#shorthand-function'

  shorthand-function: 
    name: meta.class.methods.js
    #[^\)]*\)\s*{)
    begin: |
      (?x)
      (?<![\w$])(?:(constructor)|([a-zA-Z_$][\w$]*)|("|')((?:(?!\3).|(?:\\\3))*)(\3))\s*
      (?=\()
    beginCaptures:
      '1': {name: storage.type.constructor.js}
      '2': {name: entity.name.function.js}
      '3': {name: punctuation.definition.string.begin.js}
      '4': {name: entity.name.function.js}
      '5': {name: punctuation.definition.string.end.js}
    end: (?<=})
    patterns:
    - include: '#parameter-declaration'
    - include: '#statement-group'

  shorthand-generator-function:
    name: meta.function.js
    begin: |
      (?x)
      (\*)\s*
      ((?<![\w$])[a-zA-Z_$][\w$]*\s*)?
      (?=\([^\)]*\)\s*{)
    beginCaptures:
      '1': {name: storage.type.function.js}
      '2': {name: entity.name.function.js}
    end: (?<=})
    patterns:
    - include: '#parameter-declaration'
    - include: '#statement-group'

  property-function: 
    name: meta.methods.property.js
    begin: |
      (?x)
      (?<![\w$])(get|set)\s+
      (?<![\w$])(?>([a-zA-Z_$][\w$]*))\s*
      (?=\([^\)]*\)\s*{)
    beginCaptures:
      '1': {name: storage.type.js}
      '2': {name: entity.name.property.function.js}
    end: (?<=})
    patterns:
    - include: '#parameter-declaration'
    - include: '#statement-group'

  arrow-function:
    name: meta.function.arrow.js
    # \(.*\)
    begin: |
      (?x)
      (?<![\w$])
      (?=
        (?>
          [a-zA-Z_$][\w$]*|
          \([\w$\s,={}\[\]\.:]*\)
        )
        (?>\s*)=>
      )
    end: (?<=})|(?=[\)\]},;]|$)
    patterns:
    - include: '#arrow-parameter-declaration'
    - name: meta.parameter.function.arrow.js
      begin: |
        (?x)
        (?=
          (?>[a-zA-Z_$][\w$]*)
          (?>\s*)=>
        )
      end: (?>\s*)(=>)
      endCaptures:
        '1': {name: punctuation.definition.function.js}
      patterns:
      - include: '#reserved-word'
      - name: meta.parameter.function.arrow.normal.js
        match: (?>[a-zA-Z_$][\w$]*)
        captures:
          '0': {name: variable.parameter.function.arrow.js}
    - include: '#statement-group'
    - include: '#expressions'

  # function-declaration:
  #   name: meta.function.js
  #   begin: |
  #     (?x)
  #     (?<![\w$])(function\b(?!\$)(\*)?)\s*
  #     ((?<![\w$])[a-zA-Z_$][\w$]*\s*)?
  #     (?=\([^\)]*\)\s*{)
  #   beginCaptures:
  #     '1': {name: storage.type.function.js}
  #     '3': {name: entity.name.function.js}
  #   end: (?<=})
  #   patterns:
  #   - include: '#parameter-declaration'
  #   - include: '#statement-group'

  function-declaration: # also function expression
    name: meta.function.js
    #(?=(?>\s+[\w$]+)?\s*\([^)]*\)\s*\{)
    #(?=(?>\s+[\w$]+)?\s*\([^)]*\))
    begin: |
      (?x)
      \b(function((\s*\*)|\s+|(?=[(/])))
    beginCaptures:
      '1': {name: storage.type.function.js}
    end: (?<=}|;)
    patterns:
    - include: '#comments'
    - name: invalid.illegal.js
      match: (?<=[\w$])\s+[\w$]+
    - name: meta.name.function.js
      begin: (?=[\w$]+)
      end: ''
      patterns:
      - include: '#reserved-word'
      # - name: support.class.js
      #   match: (?>[A-Z])(?>\w|\$)*
      - name: entity.name.function.js
        match: '[\w$]+'
    - include: '#parameter-declaration'
    - include: '#statement-group'

  expression-parentheses:
    name: meta.parentheses.js
    begin: \(
    beginCaptures:
      '0': {name: punctuation.parentheses.begin.js}
    end: \)
    endCaptures:
      '0': {name: punctuation.parentheses.end.js}
    patterns:
    - include: '#expressions'

  arguments-parentheses:
    name: meta.arguments.js
    begin: (?<=[\w$\)\]\}])((?<!return|void|typeof|yield)|(?<=[\w$]return|[\w$]void|[\w$]typeof|[\w$]yield))\s*\(
    beginCaptures:
      '0': {name: punctuation.parameters.begin.js}
    end: \)
    endCaptures:
      '0': {name: punctuation.parameters.end.js}
    patterns:
    - name: meta.delimiter.parameter.comma.js
      match: \,
    - include: '#expressions'

  parameter-declaration:
    name: meta.parameter.js
    begin: \(
    beginCaptures:
      '0': {name: punctuation.definition.parameters.begin.js}
    end: \)
    endCaptures:
      '0': {name: punctuation.definition.parameters.end.js}
    patterns:
    - include: '#comments'
    - name: punctuation.rest-parameter.js
      match: \.{3}
    - include: '#reserved-word'
    - name: variable.parameter.function.js
      match: (?<![\w$])[a-zA-Z_$][\w$]*
    - name: meta.delimiter.parameter.comma.js
      match: \,[ |\t]*
    - name: variable.parameter.destructuring.js
      begin: |
        (?x)
        (?=(?:\[|{))
      end: (?==|,|\))
      patterns:
      - include: '#destructuring-pattern'
    - name: meta.default-parameters.js
      begin: (=)
      beginCaptures:
        '1': {name: punctuation.declaration.default-parameters.js}
      end: (?=[,;\}\]\)])|(?<!,|^|\s|[&|<>\+\-\*\/=\.])(?=\s*\n)
      patterns:
      - include: '#expressions'

  arrow-parameter-declaration:
    name: meta.parameter.js
    begin: |
      (?x)
      (?<![\w$])
      (?=\(.*\)\s*=>)
    end: (?<=\))(?>\s*(=>))
    endCaptures:
      '1': {name: punctuation.definition.function.js}
    patterns:
    - include: '#parameter-declaration'

  # arrow-parameter-declaration:
  #   name: meta.parameter.js
  #   begin: |
  #     (?x)
  #     (?<![\w$])
  #     \(
  #     (?=[\w$\s,.]*\)\s*=>)
    
  #   beginCaptures:
  #     '0': {name: punctuation.definition.parameters.begin.js}
  #   end: (\))(?>\s*(=>))
  #   endCaptures:
  #     '1': {name: punctuation.definition.parameters.end.js}
  #     '2': {name: punctuation.definition.function.js}
  #   patterns:
  #   - include: '#comments'
  #   - name: punctuation.rest-parameter.js
  #     match: \.{3}
  #   - include: '#reserved-word'
  #   - name: variable.parameter.function.js
  #     match: (?<![\w$])[a-zA-Z_$][\w$]*
  #   - name: meta.delimiter.parameter.comma.js
  #     match: \,[ |\t]*

  property-accessor: 
    name: meta.accessor.property.js
    begin: (?<=[\w$\)\]\}])((?<!return|void|typeof|yield)|(?<=[\w$]return|[\w$]void|[\w$]typeof|[\w$]yield))\s*\[
    beginCaptures:
      '0': {name: punctuation.accessor.begin.js}
    end: \]
    endCaptures:
      '0': {name: punctuation.accessor.end.js}
    patterns:
    - include: '#expressions'

  array-initializer:
    name: meta.declaration.array.js
    begin: \[
    beginCaptures:
      '0': {name: punctuation.definition.array.js}
    end: \]
    endCaptures:
      '0': {name: punctuation.definition.array.js}
    patterns:
    - name: meta.delimiter.object.comma.js
      match: \,
    - include: '#expressions'

  object-initializer:
    name: meta.declaration.object.js
    begin: \{
    beginCaptures:
      '0': {name: punctuation.definition.object.js}
    end: \}
    endCaptures:
      '0': {name: punctuation.definition.object.js}
    patterns:
    - include: '#comments'
    - name: meta.object.property.js
      begin: |
        (?x)
        (?:
          (\d+)|
          (?:([a-zA-Z_?$][\w?.$]*)|(("|')((?:(?!\4).|(\\\4))*)(\4)))(?=\s*:\s*function(?![\w$]))|
          (?:([a-zA-Z_?$][\w?.$]*)|(("|')(?:(?!\10).|(\\\10))*(\10)))
        )\s*(:)
      beginCaptures:
        '1':  {name: constant.numeric.js}
        '2':  {name: entity.name.function.js}
        '3':  {name: string.quoted.single.js}
        '4':  {name: punctuation.definition.string.begin.js}
        '5':  {name: entity.name.function.js}
        '6':  {name: constant.character.escape.js}
        '7':  {name: punctuation.definition.string.end.js}
        '8':  {name: entity.name.property.js}
        '9':  {name: string.quoted.single.js}
        '10': {name: punctuation.definition.string.begin.js}
        '11': {name: constant.character.escape.js}
        '12': {name: punctuation.definition.string.end.js}
        '13': {name: punctuation.definition.property.js}
      end: (,)\s*|(?=})
      endCaptures:
        '1': {name: meta.delimiter.object.comma.js}
      patterns:
      - include: '#expressions'
    - name: meta.delimiter.object.comma.js
      match: \,
    - include: '#property-function'
    - include: '#function-declaration'
    - include: '#shorthand-generator-function'
    - include: '#shorthand-function'

  regexp:
    patterns:
    - name: keyword.other.control.anchors.regexp.js # was entity # was keyword
      match: \\[bBAZzG]|[$^]
    - name: string.regexp.set.js
      begin: \[(\^?\])? # TOCHECK: "[^]]" and "[]]" valid?
      end: \]
      patterns:
      - name: constant.other.posix-bracket.regexp.js
        match: \[:\^?(?>alnum|alpha|ascii|blank|cntrl|digit|graph|lower|print|punct|space|upper|xdigit|word):\]
      - include: '#set' # recursive; '$self' would self-include the whole file
      - include: '#character_class'
      - include: '#character_property'
      - include: '#special_escapes'
      - include: '#escaped_char'
      - name: constant.other.range.regexp.js
        match: .-[^\]]
      - name: keyword.operator.intersection.regexp.js
        match: (?<!\[)&&(?!\])
    - name: meta.regexp.group.js
      begin: |
        (?x) ((?#1)\()
        ((?#2)\?
          (?:
           <[=!]
          |[>=:!]
          |[imx]{,3}(?:-[imx]{1,3})?(?::(?!\))|(?=\)))
          |[<']((?#3)\w+)[>']
          )
        )?
      beginCaptures:
       '1': {name: storage.type.regexp.group.begin}
       '2': {name: string.regexp constant.other.assertion.regexp}
       '3': {name: variable.other.regexp}
      end: \)
      endCaptures:
       '0': {name: storage.type.regexp.group.end}
      patterns:
      - include: '#regexp'
    - name: keyword.other.backref.regexp.js
      match: | # (?<!\|)\g\w+
        (?x)
         (\\\d+)
        |(\\k[<'](-?\d+|\w+([-+]\d+)?)[>'])
      captures:
        '1': {name: variable.other.regexp}
        '2': {name: keyword.other.backref.regexp}
        '3': {name: variable.other.regexp}
    - name: support.operator.quantifier.regexp.js # was support # was keyword
      match: ((?<!\()[?*+][?+]?)|\{\d*(,\d*)?\}
    - name: keyword.control.character-class.regexp.js
      match: \\[wWsSdDhH]|\.
    - name: constant.character.escape.special.regexp.js
      match: |
        (?x)\\
        ([tvnrbfae]   (?# general chars)
        |[0-8]{3}     (?# octal)
        |x\h\h        (?# hexadecimal)
        |x\{7\h{7}\}  (?# wide hexadecimal)
        |c\d+         (?# control char)
        |M-(\\C-)?\d+ (?# meta control char)
        |C-\d+        (?# control char 2)
        )
    - name: constant.character.escape.general.regexp.js #constant.character.escape.js
      match: \\.
    - name: meta.regexp.other.js
      match: .

# keywords 
  keywords:
    patterns:
    - include: '#operators'
      # - name: storage.type.js
      # match: \b(?>boolean|byte|char|class|double|enum|float|function|int(?>erface)?|long|short|var|void)(?![\w$])
    - name: storage.type.js
      match: \b(?>class|var|let|const)(?![\w$]) #function
    # - name: storage.modifier.js
      # match: \b(?>const|export|extends|final|implements|native|private|protected|public|static|synchronized|throws|transient|volatile)(?![\w$])
    - name: storage.modifier.js
      match: \b(?>export|extends)(?![\w$])
    - name: keyword.control.js
      match: \b(?>break|case|catch|continue|default|do|else|finally|for|goto|if|import|package|return|switch|throw|try|while|yield(?>\*)?)(?![\w$])
    - name: variable.language.js
      match: \b(?>super|this|arguments)(?![\w$]) #self
    - name: constant.language.boolean.true.js
      match: \btrue(?![\w$])
    - name: constant.language.boolean.false.js
      match: \bfalse(?![\w$])
    - name: constant.language.null.js
      match: \bnull(?![\w$])

  operators:
    patterns:
    - name: keyword.operator.js
      match: \b(?>delete|new|typeof|void|with)(?![\w$])
    - name: keyword.operator.js
      match: '!|%|&|\*|\/|\-\-|\-|\+\+|\+|~|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\|\||\?|\:|\*=|(?<!\()/=|%=|\+=|\-=|&=|\^=|\b(?>in(?>stanceof)?|of)(?![\w$])'
    - name: keyword.operator.spread.js
      match: \.{3}


  reserved-word:
    name: meta.invalid.js #invalid.illegal
    match: |
      (?x)
      \b(?>
        await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|false|finally|for|function|let|if|implements|import|in(?>stanceof|terface)?|new|null|private|protected|package|public|static|
        return|super|switch|this|throw(?>s)?|true|try|typeof|var|void|while|with|yield(?>\*)?
      )(?![\w$]) # abstract|boolean|byte|char|double|final|float|goto|int|long|native|short|synchronized|transient|volatile|

  numeric:
    patterns:
    - name: constant.numeric.js # like .01
      match: (?<![\w$])\.\d+\b
    - name: constant.numeric.octal.js # like 0o777
      match: \b(?<!\.)(?>0(?>o|O|(?![bBxX]))[0-7]+(?!\d+))((?:\.\d)|[a-zA-Z8-9_$][\w$]*)?
      captures:
        '1': {name: invalid.illegal}
    - name: constant.numeric.binary.js # like 0b0100010
      match: \b(?<!\.)(?>0(?>b|B)[0-1]+)([a-zA-Z2-9_$][\w$]*)?
      captures:
        '1': {name: invalid.illegal}
    - name: constant.numeric.js # like 10.01px
      match: \b(?<!\.)\d+\.(?:\d*([a-zA-Z_$][\w$]*)?)
      captures:
        '1': {name: invalid.illegal}
    - name: constant.numeric.js # like 0xFFF
      match: \b(?<!\.)(?>(?>0(?>x|X)[\da-fA-F]+)|(?>\d+))([a-zA-Z_$][\w$]*)? # (\.\d+)?
      captures:
        '1': {name: invalid.illegal}

  support-functions:
    patterns:
    - name: support.function.prototype.object.js
      match: |
        (?x)
        (?<=\.)\s*(?>
          __define(?>Getter|Setter)__|__lookup(?>Getter|Setter)__|hasOwnProperty|isPrototypeOf|propertyIsEnumerable|to(?>LocaleString|Source|String)|unwatch|valueOf|watch
        )(?=\s*\()
    - name: support.function.prototype.number.js
      match: |
        (?x)
        (?<=\.)\s*(?>
          to(?>Exponential|Fixed|Precision)
        )(?=\s*\()
    - name: support.function.prototype.string.js
      match: |
        (?x)
        (?<=\.)\s*(?>
          anchor|big|blink|bold|char(?>At|CodeAt)|codePointAt|concat|endsWith|fixed|font(?>color|size)|includes|indexOf|italics|lastIndexOf|link|localeCompare|match|normalize|quote|repeat|replace|search|slice|small|split|startsWith|strike|sub(?>str|string)?|sup|to(?>Locale(?>LowerCase|UpperCase)|LowerCase|UpperCase)|trim(?>Left|Right)?
        )(?=\s*\()
    - name: support.function.prototype.array.js
      match: |
        (?x)
        (?<=\.)\s*(?>
          concat|copyWithin|entries|every|fill|filter|find(?>Index)?|forEach|includes|indexOf|join|keys|lastIndexOf|map|pop|push|reduce(?>Right)?|reverse|shift|slice|some|sort|splice|unshift|values
        )(?=\s*\()
    - name: support.function.prototype.function.js
      match: |
        (?x)
        (?<=\.)\s*(?>
          apply|bind|call|isGenerator
        )(?=\s*\()
    - name: support.function.prototype.math.js
      match: |
        (?x)
        (?<=\.)\s*(?>
          a(?>bs|cos(?>h)?|sin(?>h)?|tan(?>2|h)?)|cbrt|ceil|clz32|cos(?>h)?|exp(?>m1)?|floor|fround|hypot|imul|log(?>10|1p|2)?|max|min|pow|random|round|sign|sin(?>h)?|sqrt|tan(?>h)?|trunc
        )(?=\s*\()
    - name: support.function.prototype.dom.js
      match: |
        (?x)
        (?<=\.)\s*(?>
          appendChild|
          cloneNode|
          compareDocumentPosition|
          contains|
          hasChildNodes|
          insertBefore|
          is(?>DefaultNamespace|EqualNode)|
          lookup(?>NamespaceURI|Prefix)|
          normalize|
          removeChild|
          replaceChild|

          closest|
          get(?>Attribute(?>Node|NodeNS|NS)?|BoundingClientRect|ClientRects|ElementsBy(?>ClassName|TagName|TagNameNS))|
          has(?>Attribute(?>NS|s)?)|
          insertAdjacentHTML|
          matches|
          query(?>Selector(?>All)?)|
          remove(?>Attribute(?>Node|NS)?)?|
          request(?>Fullscreen|PointerLock)|
          scroll(?>IntoView(?>IntoViewIfNeeded)?)|
          set(?>Attribute(?>Node|NodeNS|NS)?|Capture)|

          addEventListener|
          detachEvent|
          dispatchEvent|
          fireEvent|
          removeEventListener|

          blur|
          click|
          focus(?>SpellCheck)?|

          createEvent|
          preventDefault|
          stopImmediatePropagation|
          stopPropagation
        )(?=\s*\()
    - name: support.function.prototype.document.js
      match: |
        (?x)
        (?<=\.)\s*(?>
          adoptNode|
          caret(?>PositionFromPoint|RangeFromPoint)|
          clear|
          close|
          create(?>Attribute|CDATASection|Comment|DocumentFragment|Element(?>NS)?|EntityReference|Event|Expression|NodeIterator|NSResolver|ProcessingInstruction|Range|TextNode|TouchList|TreeWalker)|
          elementFromPoint|
          enableStyleSheetsForSet|
          evaluate|
          execCommand|
          exitPointerLock|
          get(?>BoxObjectFor|Element(?>ById|sBy(?>ClassName|Name|TagName(?>NS)?))|Selection)|
          hasFocus|
          importNode|
          loadOverlay|
          open|
          query(?>CommandSupported|Selector(?>All)?)|
          registerElement|
          releaseCapture|
          write(?>ln)?
        )(?=\s*\()

    # match: |
    #   (?x)
    #   (?<=\.)\s*(?>
    #     s(?>h(?>ift|ow(?>Mod(?>elessDialog|alDialog)|Help))|croll(?>X|By(?>Pages|Lines)?|Y|To)?|t(?>op|rike)|i(?>n|zeToContent|debar|gnText)|o(?>me|rt)|u(?>p|b(?>str(?>ing)?)?)|pli(?>ce|t)|e(?>nd|t(?>Re(?>sizable|questHeader)|M(?>i(?>nutes|lliseconds)|onth)|Seconds|Ho(?>tKeys|urs)|Year|Cursor|Time(?>out)?|Interval|ZOptions|Date|UTC(?>M(?>i(?>nutes|lliseconds)|onth)|Seconds|Hours|Date|FullYear)|FullYear|Active)|arch)|qrt|lice|avePreferences|mall)|
    #     h(?>ome|andleEvent)|
    #     navigate|
    #     c(?>har(?>CodeAt|At)|o(?>s|n(?>cat|t(?>ains|extual)|firm)|mpile)|eil|l(?>one|ear(?>Timeout|Interval)?)|a(?>ptureEvents|ll)|reate(?>StyleSheet|Popup|EventObject))|
    #     t(?>o(?>GMTString|S(?>tring|ource)|U(?>TCString|pperCase)|Lo(?>caleString|werCase))|est|a(?>n|int(?>Enabled)?))|
    #     i(?>s(?>NaN|Finite|Array)|n(?>herit(?>s)?|dexOf)|talics)|
    #     d(?>i(?>r|sableExternalCapture)|ump|etachEvent)|
    #     u(?>n(?>shift|taint|escape|watch)|pdateCommands)|
    #     j(?>oin|avaEnabled)|
    #     p(?>o(?>p|w)|ush|lugins.refresh|a(?>ddings|rse(?>Int|Float)?)|r(?>int|ompt|eference))|
    #     e(?>scape|nableExternalCapture|v(?>al|ery)|lementFromPoint|x(?>p|ec(?>Script|Command)?|tend))|
    #     valueOf|
    #     UTC|
    #     queryCommand(?>State|Indeterm|Enabled|Value)|
    #     f(?>i(?>nd(?>Index)?|l(?>ter|e(?>ModifiedDate|Size|CreatedDate|UpdatedDate))|xed)|o(?>nt(?>size|color)|r(?>ward|Each))|loor|rom(?>CharCode)?)|
    #     watch|
    #     l(?>ink|o(?>ad|g)|astIndexOf)|
    #     a(?>sin|nchor|cos|t(?>tachEvent|ob|an(?>2)?)|pply|lert|b(?>s|ort))|
    #     r(?>ou(?>nd|teEvents)|e(?>duce(?>Right)?|size(?>By|To)|calc|turnValue|place|verse|l(?>oad|ease(?>Capture|Events)))|andom)|
    #     g(?>o|et(?>ResponseHeader|M(?>i(?>nutes|lliseconds)|onth)|Se(?>conds|lection)|Hours|Year|Time(?>zoneOffset)?|Da(?>y|te)|UTC(?>M(?>i(?>nutes|lliseconds)|onth)|Seconds|Hours|Da(?>y|te)|FullYear)|FullYear|A(?>ttention|llResponseHeaders)))|
    #     m(?>ap|in|ove(?>B(?>y|elow)|To(?>Absolute)?|Above)|ergeAttributes|a(?>tch|rgins|x))|
    #     b(?>toa|ig|o(?>ld|rderWidths)|link|ack|ind)|
    #     of
    #   )\b(?=\s*\()

...



