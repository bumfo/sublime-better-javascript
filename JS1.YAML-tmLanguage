# [PackageDev] target_format: plist, ext: tmLanguage
---
name: JavaScript1
comment: 'JavaScript Syntax: version 0.1'
fileTypes: [js, htc, jsx]
scopeName: source.js
uuid: 93E017CC-6F27-11D9-90EB-000D93589AF7

firstLineMatch: ^#!/usr/bin/env node
foldingStartMarker: ^.*\bfunction\s*(\w+\s*)?\([^\)]*\)(\s*\{[^\}]*)?\s*$
foldingStopMarker: ^\s*\}
keyEquivalent: ^~J

patterns:
- include: '#statements'

repository:

# control sequences
  comments:
    patterns:
    - name: comment.line.js
      comment: node.js shebang
      match: ^#!/usr/bin/env node
    - name: comment.block.documentation.js
      begin: /\*\*(?!/)
      end: \*/
      captures:
        '0': {name: punctuation.definition.comment.js}
    - name: comment.block.js
      begin: /\*
      end: \*/
      captures:
        '0': {name: punctuation.definition.comment.js}
    - name: comment.line.double-slash.js
      match: (//).*$\n?
      captures:
        '1': {name: punctuation.definition.comment.js}
    - name: comment.line.double-slash.js
      match: ^(#!\/).*$\n?
      captures:
        '1': {name: punctuation.definition.comment.js}
    - name: comment.block.html.js
      match: (<!--|-->)
      captures:
        '0': {name: punctuation.definition.comment.html.js}
        '2': {name: punctuation.definition.comment.html.js}

# statements
  statements:
    patterns:
    - include: '#comments'
    - include: '#class-declaration'
    - include: '#if-statement'
    - include: '#expressions'
    - include: '#statement-group'
    - name: punctuation.terminator.statement.js
      match: \;

  if-statement: 
    name: meta.statement.if.js
    begin: |
      (?x)
      \b(if)\b\s*
      (?=\(.*?\)\s*{)
    beginCaptures:
      '1': {name: keyword.control.if.js}
    end: (?<=})
    patterns:
    - include: '#expression-parentheses'
    - include: '#statement-group'

  statement-group:
    name: meta.statement-group
    begin: \{
    beginCaptures:
      '0': {name: punctuation.definition.statementgroup.begin.js}
    end: \}
    endCaptures:
      '0': {name: punctuation.definition.statementgroup.end.js}
    patterns:
    - include: '#statements'

# expressions
  expressions:
    patterns:
    - name: meta.delimiter.object.comma.js
      match: \,[ |\t]* 
    
    - include: '#primary-expressions'
    - include: '#keywords'
    - include: '#identifier-expressions'
    - include: '#parentheses-expression'
    - name: meta.delimiter.method.period.js
      match: \.(?![0-9])

  parentheses-expression:
    name: meta.brace.round.js
    comment: Primary Expressions of Expressions
    begin: (?<![\}\]\)]|["'])\(
    beginCaptures:
      '0': {name: punctuation.parentheses.begin.js}
    end: \)
    endCaptures:
      '0': {name: punctuation.parentheses.end.js}
    patterns:
    - include: '#expressions'

  primary-expressions:
    patterns:
    - include: '#numeric'
    - name: string.quoted.single.js
      begin: "'"
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.js}
      end: "'"
      endCaptures:
        '0': {name: punctuation.definition.string.end.js}
      patterns:
      - name: constant.character.escape.js
        match: '\\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)'
    - name: string.quoted.double.js
      begin: '"'
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.js}
      end: '"'
      endCaptures:
        '0': {name: punctuation.definition.string.end.js}
      patterns:
      - name: constant.character.escape.js
        match: '\\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)'
    - name: string.regexp.js
      begin: (?<=[=(:\[,]|^|return|yield|yield\*|&&|\|\||!)\s*(/)(?![/*+{}?])
      beginCaptures:
        '1': {name: punctuation.definition.string.begin.js}
      end: (/)[igm]*
      endCaptures:
        '1': {name: punctuation.definition.string.end.js}
      patterns:
      - name: constant.character.escape.js
        match: \\.
    - include: '#function-declaration'

  identifier-expressions:
    name: meta.expression.identifier.js
    begin: (?=(\.)?\b[a-zA-Z_$][a-zA-Z0-9_$]*\b)
    end: (?!\s*(\.\s*)?[a-zA-Z_$])\b
    patterns:
    - name: meta.delimiter.method.period.js
      match: \.(?![0-9])
    - name: support.function.js
      match: (?<=\.|)\s*\b[a-zA-Z_$][a-zA-Z0-9_$]*\b(?=\s*\()
    - name: entity.name.function.js
      match: (?<=\.|)\s*\b[a-zA-Z_$][a-zA-Z0-9_$]*\b(?=\s*\=\s*\bfunction\b)
    - name: support.class.js
      match: (?<=\.|)\s*\b[a-zA-Z_$][a-zA-Z0-9_$]*\b(?=\s*\=\s*\bclass\b)
    - name: support.constant.js #meta.identifier.js
      match: (?<=\.)\s*[a-zA-Z_$][a-zA-Z0-9_$]*\b
    - name: support.class.js #meta.identifier.js
      match: \b[A-Z_$][a-zA-Z0-9_$]*\b(?=\s*\.)
    - name: meta.identifier.js
      match: \b[a-zA-Z_$][a-zA-Z0-9_$]*\b(?=\s*\.)
    - name: meta.identifier.js
      match: \b[a-zA-Z_$][a-zA-Z0-9_$]*\b
      

# declarations
  class-declaration:
    name: meta.class.js
    begin: |
      (?x)
      \b(class)\b\s*
      ([a-zA-Z_$][a-zA-Z0-9_$]*)?\s*
      (?:(extends)\s*([a-zA-Z_$][a-zA-Z0-9_$]*)?\s*)?
      (?={)
    beginCaptures:
      '1': {name: storage.type.class.js}
      '2': {name: support.class.js}
      '3': {name: storage.modifier.js}
      '4': {name: support.class.js}
    end: (?<=})
    patterns:
    - name: meta.class.block.js
      begin: '{'
      end: '}'
      patterns:
      - name: meta.class.methods.js
        begin: |
          (?x)
          \b(?:(constructor)|([a-zA-Z_$][a-zA-Z0-9_$]*))\s*(?=\([^\)]*\)\s*{)
        beginCaptures:
          '1': {name: storage.type.constructor.js}
          '2': {name: entity.name.function.js}
        end: (?<=})
        patterns:
        - include: '#parameter-declaration'
        - include: '#statement-group'
  
  function-declaration:
    name: meta.function.js
    begin: |
      (?x)
      \b(function\b(\*)?)\s*
      (\b[a-zA-Z_$][a-zA-Z0-9_$]*\s*)?
      (?=\([^\)]*\)\s*{)
    beginCaptures:
      '1': {name: storage.type.function.js}
      '3': {name: entity.name.function.js}
    end: (?<=})
    patterns:
    - include: '#parameter-declaration'
    - include: '#statement-group'

  expression-parentheses:
    name: meta.parameter.js
    begin: \(
    beginCaptures:
      '0': {name: punctuation.parentheses.begin.js}
    end: \)
    endCaptures:
      '0': {name: punctuation.parentheses.end.js}
    patterns:
    - include: '#expressions'

  parameter-declaration:
    name: meta.parameter.js
    begin: \(
    beginCaptures:
      '0': {name: punctuation.definition.parameters.begin.js}
    end: \)
    endCaptures:
      '0': {name: punctuation.definition.parameters.end.js}
    patterns:
    - name: invalid.illegal
      match: \b(?:super|this|arguments)\b
    - name: variable.parameter.function.js
      match: '[a-zA-Z_$][a-zA-Z0-9_$]*'
    - name: meta.delimiter.object.comma.js
      match: ',[ |\t]*'

  keywords:
    patterns:
    - name: keyword.operator.js
      match: \b(delete|in|instanceof|new|typeof|void|with)\b
    - name: keyword.operator.js
      match: '!|%|&|\*|(?<![=(:\[,]|^|return|yield|yield\*|&&|\|\||!)\/|\-\-|\-|\+\+|\+|~|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\|\||\?|\:|\*=|(?<!\()/=|%=|\+=|\-=|&=|\^=|\b(in|instanceof)\b'
    - name: storage.type.js
      match: \b(boolean|byte|char|class|double|enum|float|function|int|interface|long|short|var|void)\b
    - name: storage.modifier.js
      match: \b(const|export|extends|final|implements|native|private|protected|public|static|synchronized|throws|transient|volatile)\b
    - name: keyword.control.js
      match: \b(break|case|catch|continue|default|do|else|finally|for|goto|if|import|package|return|switch|throw|try|while|yield|yield\*)\b
    - name: variable.language.js
      match: \b(super|this|arguments|self)\b
    - name: constant.language.boolean.true.js
      match: \btrue\b
    - name: constant.language.boolean.false.js
      match: \bfalse\b
    - name: constant.language.null.js
      match: \bnull\b

  numeric:
    patterns:
    - name: constant.numeric.js
      match: '(?<![a-zA-Z0-9_$])\.[0-9]+\b'
    - name: constant.numeric.js
      match: \b(?<!\.)[0-9]+\.(?:[0-9]|([a-zA-Z_$][a-zA-Z0-9_$]*)?)
      captures:
        '1': {name: invalid.illegal}
    - name: constant.numeric.js
      match: '\b(?<!\.)((0(x|X)[0-9a-fA-F]+)|([0-9]+(\.[0-9]+)?))\b'

...
